{{ 'ring-details.css' | asset_url | stylesheet_tag }}
<div id="ProductSection-diamond-detail"
    class="product-section"
    data-section-id="{{ section_id }}"
    data-section-type="product"
    data-product-id="{{ product.id }}"
    data-product-handle="{{ product.handle }}"
    data-product-title="{{ product.title | escape }}"
    data-history="{{ enableHistory }}"
    data-modal="{{ isModal }}">
    <div class="page-content page-content--product page-content--full">
      <div class="page-width">
    <div class="product-grid__container product--images grid " >
      <div class="grid__item medium-up--three-fifths product-single__sticky">
        <div class="grid__item slide_for">
        <div class="image-wrap loaded" id="product-images-container"> </div>
           <div class="meta-vedio" id="meta-vedio">
              <video id="main-video" style="display:none;" width="100%" height="100%" autoplay loop preload controls>
                Your browser does not support the video tag.
              </video>
              <img id="main-image" width="100%" height="100%" style="display: none;">
          </div>
        </div>
         <div class="img_thumbnails_container">
           <div class="image-wrap slider-nav" id="product-images-container-nav"></div>
           <div class="image-wrap slider-nav" id="product-vedio-container-nav">
             <div class="thumbnails" id="thumbnail"></div>
             <div class="thumb_icon"><svg viewBox="0 0 512 512" xml:space="preserve" aria-hidden="true" focusable="false" role="presentation" class="icon icon-video"><path fill="none" d="M256,20C125.872,20,20,125.872,20,256s105.872,236,236,236s236-105.872,236-236S386.128,20,256,20z M156.64,387.712V124.288l246.72,131.72L156.64,387.712z"></path><path d="M512,256C512,114.616,397.384,0,256,0S0,114.616,0,256s114.616,256,256,256S512,397.384,512,256z   M256,492C125.872,492,20,386.128,20,256S125.872,20,256,20s236,105.872,236,236S386.128,492,256,492z"></path><polygon points="156.64,387.712 403.36,256.008 156.64,124.288 "></polygon></svg></div>
         </div>
         </div>
        
      </div>
      <div class="product-grid__content product--description product-single__sticky grid__item medium-up--two-fifths">
  
            <div class="product-single__meta" id="product-details-container">
              <div class="button"> <button id ="backButton">
                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-arrow-left">
                      <line x1="19" y1="12" x2="5" y2="12"></line>
                      <polyline points="12 19 5 12 12 5"></polyline>
                  </svg>
                Back
              </button></div>
              <div class="product-block product-block--header product-single__header small--hide" id="title">
                
              </div>
                
              <div data-product-blocks="">
                <div class="product-block">
                  <div id="product-price"></div>
                </div>
                 <div class="product-block"> 
                  <div id="product-desc">
                  </div>
                </div>
                <div class="product-block" data-dynamic-variants-enabled="">
                  <div id="product-variants-container" class="product-variants">
                  </div>
                </div>
                <div class="product-block">
                    <div class="product-block">
                      <form method="post" action="" id="AddToCartForm-template--21844089110801__main-{{ product.id }}" accept-charset="UTF-8" class="product-single__form" enctype="multipart/form-data">
                        <input type="hidden" name="form_type" value="product">
                        <input type="hidden" name="utf8" value="âœ“">
                       </form>
                  </div>
                </div>
                  <button class="btn add-cart_btn" id="selectedButton">Add To Ring</button>
              </div>
  
            </div>
        
          </div>
    </div>
        
    </div>
      </div>
    </div>
      <script>
        // Function to handle back button click
function handleBackButtonClick() {
    window.history.back(); // Go back to the previous page
}

// Add event listener to the back button element
const backButton = document.getElementById('backButton'); // Replace 'backButton' with the ID of your back button element
if (backButton) {
    backButton.addEventListener('click', handleBackButtonClick);
}
        
  // function updateProductImages(productData, productImagesContainer, selectedVariant) {
  //                productImagesContainer.innerHTML = ''; // Clear existing images

  //            const defaultImg = productData.product.images[0];
  //                 productImagesContainer.innerHTML = `<img src="${defaultImg.src}" alt="${defaultImg.alt}" class="photoswipe__image defaultimg active" data-id="${defaultImg.id}" data-index="${defaultImg.index}">`;
            
  //                productData.product.images.forEach(image => {
  //                  if(defaultImg !== image.id )
  //                  productImagesContainer.innerHTML += `<img src="${image.src}" alt="${image.alt}" class="photoswipe__image" data-id="${image.id}" data-index="${image.index}">`;
                   
  //                });
        
  //       const selectedImage = productData.product.images.find(image => image.id === selectedVariant.image_id);
  //           // console.log(selectedVariant);
  //             if (selectedImage) {
  //                 productImagesContainer.querySelector(`[data-id="${selectedImage.id}"]`).classList.add('active');
  //             }
  //         }

  function updateMainDisplay(type, src) {
      const mainVideo = document.getElementById('main-video');
      const mainImage = document.getElementById('main-image');


      if (type === 'video') {
        mainVideo.src = src;
        mainVideo.style.display = 'block';
        mainImage.style.display = 'none';
        mainVideo.play();
      } else if (type === 'image') {
        mainImage.src = src;
        mainVideo.style.display = 'none';
      }
    }
function updateProductImages(productData, productImagesContainer, productImagesContainernav, selectedVariant) {
      productImagesContainer.innerHTML = '';
      productImagesContainernav.innerHTML = '';

      const allVariantsNullImage = productData.product.variants.every(variant => variant.image_id === null);

      if (allVariantsNullImage) {
        const defaultImg = productData.product.images[0];
        productImagesContainer.innerHTML += `<img src="${defaultImg.src}" alt="${defaultImg.alt}" class="photoswipe__image defaultimg active" data-id="${defaultImg.id}" data-index="${defaultImg.index}">`;
        productImagesContainernav.innerHTML += `<img src="${defaultImg.src}" alt="${defaultImg.alt}" class="photoswipe__thumbnail defaultimg active" data-id="${defaultImg.id}" data-index="${defaultImg.index}">`;
      } else {
        productData.product.images.forEach(image => {
          const isActive = image.id === selectedVariant.image_id ? 'active' : '';
          productImagesContainer.innerHTML += `<img src="${image.src}" alt="${image.alt}" class="photoswipe__image ${isActive}" data-id="${image.id}" data-index="${image.index}">`;
          productImagesContainernav.innerHTML += `<img src="${image.src}" alt="${image.alt}" class="photoswipe__thumbnail ${isActive}" data-id="${image.id}" data-index="${image.index}">`;
        });
      }

      const allImages = productImagesContainer.querySelectorAll('.photoswipe__image');
      const allThumbnails = productImagesContainernav.querySelectorAll('.photoswipe__thumbnail');

      allThumbnails.forEach(thumbnail => {
        thumbnail.addEventListener('click', () => {
          const imageId = thumbnail.getAttribute('data-id');
          const selectedImage = productImagesContainer.querySelector(`[data-id="${imageId}"]`);

          if (selectedImage) {
            allImages.forEach(img => img.classList.remove('active'));
            allThumbnails.forEach(tnail => tnail.classList.remove('active'));
      
            selectedImage.classList.add('active');
            thumbnail.classList.add('active');
            updateMainDisplay('image', selectedImage.src);
            document.querySelectorAll('#product-vedio-container-nav img').forEach(img => img.classList.remove('active'));
             // Remove active class from the video container
                    const videoContainer = document.querySelector('#product-vedio-container-nav');
                    if (videoContainer) {
                        videoContainer.classList.remove('active');
                    }
              const imageContainer = document.querySelector('#product-images-container-nav');
                    if (imageContainer) {
                        imageContainer.classList.add('active');
                    }
          }
        });
      });

      const selectedImage = productImagesContainer.querySelector(`[data-id="${selectedVariant.image_id}"]`);
      const selectedThumbnail = productImagesContainernav.querySelector(`[data-id="${selectedVariant.image_id}"]`);

      if (selectedImage && selectedThumbnail) {
        selectedImage.classList.add('active');
        selectedThumbnail.classList.add('active');
      }
    }
        
        
          function formatMoney(amount, currency = '$', decimal = '.', thousands = ',') {
              const negative = amount < 0 ? '-' : '';
              const fixedAmount = Math.abs(parseFloat(amount) || 0).toFixed(2);
              const parts = fixedAmount.split('.');
              const integerPart = parts[0].replace(/(\d)(?=(\d{3})+(?!\d))/g, `$1${thousands}`);
              const decimalPart = parts[1] ? `${decimal}${parts[1]}` : '';
          
              return `${negative}${currency}${integerPart}${decimalPart}`;
          }
            
        function updateProductPrices(productPriceContainer, selectedVariant) {
         
          const formattedPrice = formatMoney(selectedVariant.price); // Example usage: format $25.99
             productPriceContainer.innerHTML = `<label class="variant__label">Price:</label><span class="product__price"> ${formattedPrice}</span>`;
                console.log(formattedPrice);
          
        }

    function desc(productData, productDescContainer){
            productDescContainer.innerHTML = '';       
            const data = `${productData.product.body_html}`;
                
            // Split the data string by "<br>" tag
           
                console.log("Original data:", data);
               const columns = data.split(/<br\s*(?:data-mce-fragment=['"]?1['"]?)?\s*\/?>/);
               const columns_other = data.split('<br>');
                

            console.log("Columns after split:", columns);
            let cleanedArray = columns.map(item => item.replace(/<p>/g, '').replace(/<\/p>/g, ''));
      
                
            // Create an object to store the selected columns
            const selectedColumns = {};
  
            const selectedColumnNames = ['Stock No', 'Availability', 'Shape', 'Weight', 'Color', 'Clarity', 'Cut','Grade','Polish','Symmetry', 'Measurements', 'Lab','Carats',];

[cleanedArray, columns_other].forEach(columnSet => {
    columnSet.forEach(column => {
        // Extract the column name and value
        const [columnName, columnValue] = column.split(' : ');
        // Check if the column name is in the selected list
        if (selectedColumnNames.includes(columnName.trim())) {
            // Add the column to the selectedColumns object
            selectedColumns[columnName.trim()] = columnValue.trim();
        }
    });
});

let html = '';

if (Object.keys(selectedColumns).length > 0) {
    for (const columnName in selectedColumns) {
     
        html += `<p><strong>${columnName} : </strong> <span>${selectedColumns[columnName]}</span></p>`;
    }
} else {
    // If no selected columns are found, display a message or handle it as needed
    html = '<p>No selected columns found.</p>';
}

productDescContainer.innerHTML = html;
 
        }
      
        function updateURL(filterName, value) {
  
    var url = window.location.href.split('?')[0]; // Get the base URL
    var urlParams = new URLSearchParams(window.location.search);
    urlParams.delete(filterName);
     // Encode the filter values and add them as parameters to the URL
    if (value !== undefined) {
        urlParams.set(filterName, encodeURIComponent(value));
    } else if (value !== undefined) {
        urlParams.set(filterName, encodeURIComponent(value));
    } 

    // Construct the new URL
    var newURL = url + '?' + urlParams.toString();

     newURL = newURL.replace(/%3B/g, ';');

    window.history.pushState({}, '', newURL);
     // Store filter values in localStorage
    var filterValues = {
        value: value
    };
    localStorage.setItem(filterName, JSON.stringify(filterValues));
}
 document.addEventListener("DOMContentLoaded", function() {
              // Extract product ID from URL parameters
              const urlParams = new URLSearchParams(window.location.search);
              const productId = urlParams.get('product_id');
              const local_ring_VariantId = localStorage.getItem('selectedVariantId');
              const selectedDVariantId = localStorage.getItem('selectedDVariantId');
              const local_ring_RingId = localStorage.getItem('selectedRingId');
              const selectedDiamondId = localStorage.getItem('selectedDiamondId');
   
              // Fetch product details using AJAX or Liquid
              fetch(`/admin/api/2024-01/products/${productId}.json`, {
                  headers: {
                      'X-Shopify-Access-Token': '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',
                  }
              })
              .then(response => response.json())
              .then(productData => {
                  // Display product details on the page
                  console.log(productData);
                  
                  const productTitle = document.getElementById('title');
                  const productDescContainer = document.getElementById('product-desc');
                  const productImagesContainer = document.getElementById('product-images-container');
                  const productImagesContainernav = document.getElementById('product-images-container-nav');
                  const productVariantsContainer = document.getElementById('product-variants-container');
                  
                  const productPriceContainer = document.getElementById('product-price');
                  const addToCartForm = document.getElementById('AddToCartForm');
                  const selectedVariant = productData.product.variants[0];
                  const selectedButton = document.getElementById('selectedButton');    
  
                        productTitle.innerHTML = `<h1 class="h2 product-single__title">${productData.product.title}</h1>`;
                           desc(productData, productDescContainer);
                
                        // updateProductImages(productData, productImagesContainer, selectedVariant);
                        updateProductImages(productData, productImagesContainer, productImagesContainernav, selectedVariant)
                        updateProductPrices(productPriceContainer, selectedVariant);
                    if( local_ring_RingId !== null && local_ring_VariantId !== null){
                    selectedButton.addEventListener('click', function() {
                                                              const selectedProductId = productData.product.id;    
                                                              const selectedVariantId = selectedVariant.id;    
                                                                 selectedButton.innerHTML = '<span class="loader"></span> Adding ...';
                                                              // alert(selectedProductId);
                                                              localStorage.setItem('selectedDiamondId', selectedProductId);
                                                              localStorage.setItem('selectedDVariantId', selectedVariantId);
                                                                setTimeout(function() {            
                                                                  window.location.href = 'https://ring-premier-one.myshopify.com/pages/complete-setting'; 
                                                                }, 1450); 
                                                             
                                                    });
                      } else {
                          selectedButton.addEventListener('click', function() {
                                                              const selectedProductId = productData.product.id;    
                                                              const selectedVariantId = selectedVariant.id;    
                                                                 selectedButton.innerHTML = '<span class="loader"></span> Adding ...';
                                                              // alert(selectedProductId);
                                                              localStorage.setItem('selectedDiamondId', selectedProductId);
                                                              localStorage.setItem('selectedDVariantId', selectedVariantId);
                                                                setTimeout(function() {            
                                                                  window.location.href = 'https://ring-premier-one.myshopify.com/pages/ring-builder'; 
                                                                }, 1450); 
                                                             
                                                    });
                      }
                
                 if (productData.product.options[0].name !== "Title" && productData.product.options[0].values[0] !== "Default Title") {          
                  let optionIndex = 0;
                  productData.product.options.forEach(option => {
                      const variantWrapper = document.createElement('div');
                                   variantWrapper.classList.add('variant-wrapper', 'js');
                                   variantWrapper.setAttribute('data-type', 'button');
                                   variantWrapper.setAttribute('data-option-index', `${optionIndex}`);
  
                          if (option.name.toLowerCase() === 'abc'){
                                   const variantLabel = document.createElement('label');
                                         variantLabel.classList.add('variant__label');
                                         variantLabel.setAttribute('for', `option-${optionIndex}`);
                                
                                          variantLabel.innerHTML = `
                                          ${option.name} :
                                            <span id="color_name" data-variant-color-label data-index="${optionIndex}">${option.values[0]}</span>`;
                                          variantWrapper.appendChild(variantLabel);
                          
                                    const fieldset = document.createElement('fieldset');
                                          fieldset.classList.add('variant-input-wrap');
                                          fieldset.setAttribute('name', option.name);
                                          fieldset.setAttribute('data-handle', option.name);
                                          fieldset.setAttribute('id', `option-${optionIndex}`);
                
                                    const legend = document.createElement('legend');
                                          legend.classList.add('hide');
                                          legend.textContent = option.name;
                                          fieldset.appendChild(legend);
  
                            option.values.forEach(value => {
        
                           const variantInput = document.createElement('div');
                                variantInput.classList.add('variant-input');
                                variantInput.setAttribute('data-value', value);
        
                                const input = document.createElement('input');
                                input.setAttribute('type', 'radio');
                                input.setAttribute('form', 'AddToCartForm');
                                input.setAttribute('value', value);
                                input.setAttribute('name', option.name);
                                input.setAttribute('data-index', option.name);
                                input.setAttribute('data-variant-input', '');
                                input.id = `ProductSelect-${productId}-${option.name}-option-${value.replace(/ /g, '-')}`;
        
                                const label = document.createElement('label');
                                label.setAttribute('for', `ProductSelect-${productId}-${option.name}-option-${value.replace(/ /g, '-')}`);
                                label.classList.add('variant__button-label');
                                label.textContent = value;
                              
                                    variantInput.appendChild(input);
                                    variantInput.appendChild(label);
            
                                    fieldset.appendChild(variantInput);
  
                          input.addEventListener('change', () => {
                              
                           var label_check =  $('input[type=radio]:checked').val();
                           let label_span =    $(input).closest('.variant-wrapper').find('span[data-variant-color-label]');
                               label_span.text(label_check);
                               label_span.attr('data-option-index', label_check);
            
    
                           var variants = productData.product.variants; 
                           var selectedVariant;
                           for (var i = 0; i < variants.length; i++) {
                           var variant = variants[i];
                           if (variant.option1 === label_check || variant.option2 === label_check || variant.option3 === label_check)  {
                                 // selectedVariant = variant;
                                 //  break;
                              const selectedSize = $('input[name="Size"]:checked').val();
                              const selectedPurity = $('input[name="Purity"]:checked').val();
                              const selectedDiamondQuality = $('input[name="Diamond Quality"]:checked').val();
                              const selectedmetal_type = $('input[name="Metal Type"]:checked').val();
                              const selectedcolor_name = $('input[name="Color"]:checked').val();
                              
                                         // var color_name = $('select[name="Color"] option:selected').val();
                                         // var size_name = $('select[name="Size"] option:selected').val();
                                         // var metal_type = $('select[name="Metal Type"] option:selected').val();
                                         // var diamond_quality = $('select[name="Diamond Quality"] option:selected').val();
                                         // var purity = $('select[name="Purity"] option:selected').val();

                                       
                                       if(selectedcolor_name == variant.option1 || selectedmetal_type == variant.option1 ){
                                         if(selectedSize == variant.option2){
                                             if(selectedPurity == variant.option3 || selectedDiamondQuality == variant.option3){
                                                  selectedVariant = variant;
                                                  alert(selectedVariant.title);
                                                  console.log(selectedVariant);
                                                  break;
                                               }
                                       }
                                      if(selectedPurity == variant.option3 || selectedDiamondQuality == variant.option3){
                                           if(selectedSize == variant.option2 ){
                                               selectedVariant = variant;
                                               alert(selectedVariant.title);
                                               console.log(selectedVariant);
                                          break;
                                       }
                                       }
                                         
                                       }
                           }
                               }
                            
                            if (selectedVariant) {
                              console.log(selectedVariant);
                              // updateProductImages(productData, productImagesContainer, selectedVariant);
                              updateProductImages(productData, productImagesContainer, productImagesContainernav, selectedVariant)
                              updateProductPrices(productPriceContainer, selectedVariant);
                              updateURL('selectedVariant',selectedVariant.id);
                              // label.classList.add('disabled');
                            }
                            
                          });
                      });
                       
                      variantWrapper.appendChild(fieldset);
  
                        } else {
                    
                                  const variantLabel = document.createElement('label');
                                        variantLabel.classList.add('variant__label');
                                        variantLabel.setAttribute('for', `option-${optionIndex}`);
                                        variantLabel.innerHTML = `${option.name} : <span id="color_name" data-variant-color-label="" data-index="${optionIndex}" >${option.values[0]}</span>`;
                                        variantWrapper.appendChild(variantLabel);
                                  const selectElement = document.createElement('select');
                                        selectElement.setAttribute('name', option.name);
                                        selectElement.id = `option-${optionIndex}`;
                                        selectElement.innerHTML = `${option.values.map(value => `<option value="${value}">${value}</option>`).join('')}`;
                                        selectElement.addEventListener('change', () => {
                                  const selectedValue = selectElement.value;                                  
                                  let selectedIndex = selectElement.selectedIndex;
                                  let labelSpan = $(selectElement).closest('.variant-wrapper').find('span[data-variant-color-label]');
                                      labelSpan.text(selectedValue);
                                      labelSpan.attr('data-option-index', selectedIndex);
                                      var variants = productData.product.variants;
                               
                                    var selectedVariant;
                                   for (var i = 0; i < variants.length; i++) {
                                   
                                   var variant = variants[i];
                                      selectElement.querySelectorAll('option').forEach(option => {
                                          if (option.value === selectedValue) {
                                              option.disabled = true;
                                          } else {
                                              option.disabled = false;
                                          }
                                      });
                                     if (variant.option1 === selectedValue || variant.option2 === selectedValue || variant.option3 === selectedValue) {
                                         var color_name = $('select[name="Color"] option:selected').val();
                                         var size_name = $('select[name="Size"] option:selected').val();
                                         var metal_type = $('select[name="Metal Type"] option:selected').val();
                                         var diamond_quality = $('select[name="Diamond Quality"] option:selected').val();
                                         var purity = $('select[name="Purity"] option:selected').val();

                                       
                                       if(color_name == variant.option1 || metal_type == variant.option1 ){
                                         if(size_name == variant.option2){
                                             if(purity == variant.option3 || diamond_quality == variant.option3){
                                                  selectedVariant = variant;
                                                  selectedButton.addEventListener('click', function() {
                                                                const selectedProductId = productData.product.id; 
                                                                const selectedVariantId = selectedVariant.id;    
                                                                 selectedButton.innerHTML = '<span class="loader"></span> Adding ...';
                                                              // alert(selectedProductId);
                                                              localStorage.setItem('selectedDiamondId', selectedProductId);
                                                              localStorage.setItem('selectedDVariantId', selectedVariantId);
                                                                setTimeout(function() {            
                                                                  window.location.href = 'https://ring-premier-one.myshopify.com/pages/complete-setting'; 
                                                                }, 1450); 
                                                             
                                                    });  
                                                  // alert(selectedVariant.title);
                                                  // console.log(selectedVariant);
                                                  break;
                                               }
                                       }
                                      if(purity == variant.option3 || diamond_quality == variant.option3){
                                           if(size_name == variant.option2 ){
                                             
                                               selectedVariant = variant;
                                              selectedButton.addEventListener('click', function() {
                                                                const selectedProductId = productData.product.id;  
                                                                const selectedVariantId = selectedVariant.id;    
                                                
                                                                 selectedButton.innerHTML = '<span class="loader"></span> Adding ...';
                                                              // alert(selectedProductId);
                                                              localStorage.setItem('selectedDiamondId', selectedProductId);
                                                              localStorage.setItem('selectedDVariantId', selectedVariantId);
                                                
                                                                setTimeout(function() {            
                                                                  window.location.href = 'https://ring-premier-one.myshopify.com/pages/complete-setting'; 
                                                                }, 1450); 
                                                             
                                                    });
                                               // alert(selectedVariant.title);
                                               console.log(selectedVariant);
                                          break;
                                       }
                                       }
                                         
                                       }
                                       
                                          
                                     }
                                  }
                                         
                            if (selectedVariant) {
                                  // updateProductImages(productData, productImagesContainer, selectedVariant);
                              updateProductImages(productData, productImagesContainer, productImagesContainernav, selectedVariant)
                                  updateProductPrices(productPriceContainer, selectedVariant);
                                  updateURL('selectedVariant',selectedVariant.id);
                            }
                      });
                         variantWrapper.appendChild(selectElement);
                    
                    } 
                    
                    optionIndex++; 
                      productVariantsContainer.appendChild(variantWrapper);
                  });
                 
                 }
                
             
              })
                fetch(`/admin/api/2024-01/products/${productId}/metafields.json`, {
                  headers: {
                      'X-Shopify-Access-Token': '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',
                  }
              })
              .then(response => response.json())
                    .then(metaData => {
                     
                        const mainVideo = document.getElementById('main-video');
                        const videoThumbnailsContainer = document.getElementById('product-video-container-nav');
                        const videoThumbnailDiv = document.getElementById('thumbnail');


                          metaData.metafields.forEach(metaKey =>{
                            
                              if(metaKey.key === 'VideoLink' ){
                                 //const thumbnail = document.getElementById('thumbnail');
                                 const thumbUrl = `${metaData.metafields[42].value}`; // Change as per your actual thumbnail path or logic
                                   videoThumbnailDiv.innerHTML += `
                                          <img src="${thumbUrl}" alt="Video Thumbnail" data-video-src="${metaKey.value}" data-id="${metaKey.id}">
                                        `;
                                  videoThumbnailDiv.querySelectorAll('img').forEach(thumbnail => {
                                  thumbnail.addEventListener('click', function() {
                                     const videoSrc = this.getAttribute('data-video-src');
                                     updateMainDisplay('video', videoSrc);
                                    // mainVideo.src = metaKey.value;
                                    // mainVideo.play();
                                      document.querySelectorAll('.thumbnail img').forEach(tnail => tnail.classList.remove('active'));
                                     // Remove active class from all thumbnails
                                    videoThumbnailDiv.querySelectorAll('img').forEach(tnail => tnail.classList.remove('active'));
                                      this.classList.add('active');
                                       // Add active class to the video container
                                        const videoContainer = document.querySelector('#product-vedio-container-nav');
                                        if (videoContainer) {
                                            videoContainer.classList.add('active');
                                        }
                                      document.querySelectorAll('#product-images-container-nav img').forEach(img => img.classList.remove('active'));
                                    document.querySelectorAll('#product-images-container img').forEach(img => img.classList.remove('active'));
                                    document.querySelectorAll('#product-images-container img').forEach(img => img.classList.remove('defaultimg'));
                                  });
                                });
                            const thumbnailImg = document.querySelector('.thumbnails img');
                            const icon = document.querySelector('.thumb_icon');
                              icon.addEventListener('click', function() {
                                     const videoSrc = thumbnailImg.getAttribute('data-video-src');
                                     updateMainDisplay('video', videoSrc);
                                    // mainVideo.src = metaKey.value;
                                    // mainVideo.play();
                                      document.querySelectorAll('.thumbnail img').forEach(tnail => tnail.classList.remove('active'));
                                      thumbnailImg.classList.add('active');
                                      const videoContainer = document.querySelector('#product-vedio-container-nav');
                                                                            if (videoContainer) {
                                                                                videoContainer.classList.add('active');
                                                                            }
                                                        const imageContainer = document.querySelector('#product-images-container-nav');
                                            if (imageContainer) {
                                                imageContainer.classList.remove('active');
                                            }
                                      document.querySelectorAll('#product-images-container-nav img').forEach(img => img.classList.remove('active'));
                                    document.querySelectorAll('#product-images-container img').forEach(img => img.classList.remove('active'));
                                    document.querySelectorAll('#product-images-container img').forEach(img => img.classList.remove('defaultimg'));
                                  });
                               }      
                          });   
                          //               const firstVideo = metaData.metafields.find(meta => meta.key === 'VideoLink');
                          // if (firstVideo) {
                          //   updateMainDisplay('video', firstVideo.value);
                          // }
                     
                    })
                  
              .catch(error => console.error('Error fetching product details:', error));
             // const selectedVariantId = localStorage.getItem('selectedVariantId');

             //    if (selectedVariantId) {
             //        console.log('Selected Variant ID:', selectedVariantId);
             //    } else {
             //        console.log('No selected variant ID found in local storage.');
             //    }
          });

      </script>
  </body>
  </html>
