{{ 'ring-details.css' | asset_url | stylesheet_tag }}
{{ 'ring_builder.css' | asset_url | stylesheet_tag }}
{{ 'diamond.css' | asset_url | stylesheet_tag }}

<section class="" id="search_div" style="">
  {% render 'step-list' %}
  
  <div class="custom-container">
  <form action="javascript:void(0)" method="post" id="form">
    <div class="filter">
      <div class="row mx-0">

        <div class="btn_block"><button id="reset_btn" class="btn">Reset Option</button></div>

      </div>
    </div>
  </form>
    </div>
</section>

<div id="ProductSection-{{ section_id }}-{{ product.id }}" class="product-section complete-seting-page"
    data-section-id="{{ section_id }}"
    data-section-type="product"
    data-product-id="{{ product.id }}"
    data-product-handle="{{ product.handle }}"
    data-product-title="{{ product.title | escape }}"
    data-history="{{ enableHistory }}"
    data-modal="{{ isModal }}">
    <div class="page-content page-content--product page-content--full">
      <div class="page-width">
        <h2 class="h2 title text-center mb-5">Complete Ring Setting</h2>
    <div class="product-grid__container product--images grid ring-setting" >
      <div class="grid__item medium-up--three-fifths product-single__sticky">
        <div class="image-wrap loaded" id="product-images-container">
        </div>
      </div>
      <div class="product-grid__content product--description product-single__sticky grid__item medium-up--two-fifths">
  
            <div class="product-single__meta" id="product-details-container">
              <h2 class="h3 subtitle">Ring Setting</h2>
              <div class="product-block product-block--header product-single__header small--hide" id="title">
                
              </div>
  
              <div data-product-blocks="">
                <div class="product-block">
                  <div id="product-price"></div>
                </div>
                 <!-- <div class="product-block"> 
                  <div id="product-desc">
                   </div>
                </div> -->
                <div class="product-block" data-dynamic-variants-enabled="">
                  <div id="product-variants-container" class="product-variants"></div>
                </div>

              </div>
  
            </div>
        
          </div>
    </div>
    <div class="product-grid__container product--images grid center-stone-setting " >
      <div class="grid__item medium-up--three-fifths product-single__sticky">
        <div class="image-wrap loaded" id="centerstone-images-container">
        </div>
      </div>
      <div class="product-grid__content product--description product-single__sticky grid__item medium-up--two-fifths">
  
            <div class="product-single__meta" id="centerstone-details-container">
              <h2 class="h3 subtitle">Center Stone Details</h2>
              <div class="product-block product-block--header product-single__header small--hide" id="stone-title">
                
              </div>
  
              <div data-product-blocks="">
                <div class="product-block">
                  <div id="stone-product-price"></div>
                </div>
                 <div class="product-block"> 
                  <div id="stone-product-desc">
                    
                  </div>
                </div>
                <div class="product-block" data-dynamic-variants-enabled="">
                  <div id="product-variants-container" class="stone-product-variants">
                    
                  </div>
                </div>

              </div>
  
            </div>
        
          </div>
      
    </div>
        <div class="total_btn_block">
                <div class="total" id="subtotal"></div>
                <div class="btn_block">
          <button id="add-to-cart-button" class="btn">Add To Cart</button>
        </div></div>
         <div class="product-block">
    <div class="product-block">
                      <form method="post" action="/cart/add" id="AddToCartForm" accept-charset="UTF-8" class="product-single__form" enctype="multipart/form-data">
                          <input type="hidden" name="form_type" value="product">
                          <input type="hidden" name="utf8" value="âœ“">

                            <input type="hidden" name="id" id="variant_id" value="">
                          <input type="hidden" name="product_id" id="product_id" value="">
                          <input type="hidden" name="diamond_id" id="diamond_id" value="">
                          <input type="hidden" name="diamond_v_id" id="diamond_v_id" value="">
                          

                             <!-- <button type="submit" name="add" data-add-to-cart class="btn add-to-cart btn--secondary btn--full">add to cart</button> -->
                      </form>
                  </div>
                </div>
  
    </div>
      </div>
    </div>
      <script>
function updateProductImages(productData, productImagesContainer, selectedVariantId) {
                 productImagesContainer.innerHTML = ''; // Clear existing images
              fetch(`/admin/api/2024-01/variants/${selectedVariantId}.json`, {
                  headers: {
                      'X-Shopify-Access-Token': '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',
                  }
              })
              .then(response => response.json())
              .then(variantData => {
                  console.log(variantData);
            
              // .catch(error => console.error('Error fetching variant details:', error));
                 productData.product.images.forEach(image => {
                   
                    if(image.id == variantData.variant.image_id){
                       productImagesContainer.innerHTML += `<img src="${image.src}" alt="${image.alt}" class="photoswipe__image active" data-id="${image.id}" data-index="${image.index}">`;
                    }
                   
                 });
          })

          }
function updateDiamondImages(diamondData, centerstoneImagesContainer, selectedDiamondId) {
                 centerstoneImagesContainer.innerHTML = '';
                 fetch(`/admin/api/2024-01/products/${selectedDiamondId}.json`, {
                 headers: {
                    'X-Shopify-Access-Token': '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',
                  }
                })
              .then(response => response.json())
              .then(diamondData => {
                  console.log(diamondData);
                 diamondData.product.images.forEach(image => {
                  console.log(diamondData.product.variants[0]);
              
                       centerstoneImagesContainer.innerHTML += `<img src="${image.src}" alt="${image.alt}" class="photoswipe__image active" data-id="${image.id}" data-index="${image.index}">`;
                 
                   
                 });
          })
  }

function formatMoney(amount, currency = '$', decimal = '.', thousands = ',') {
              const negative = amount < 0 ? '-' : '';
              const fixedAmount = Math.abs(parseFloat(amount) || 0).toFixed(2);
              const parts = fixedAmount.split('.');
              const integerPart = parts[0].replace(/(\d)(?=(\d{3})+(?!\d))/g, `$1${thousands}`);
              const decimalPart = parts[1] ? `${decimal}${parts[1]}` : '';
              return `${negative}${currency}${integerPart}${decimalPart}`;
          }
            
function updateProductPrices(productPriceContainer, selectedVariantId) {
             // Fetch the selected variant details using the selected variant ID
              fetch(`/admin/api/2024-01/variants/${selectedVariantId}.json`, {
                  headers: {
                      'X-Shopify-Access-Token': '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',
                  }
              })
              .then(response => response.json())
              .then(variantData => {
                  const formattedPrice = formatMoney(variantData.variant.price);
                  productPriceContainer.innerHTML = `<label class="variant__label">Price:</label><span class="product__price">${formattedPrice}</span>`;
                  console.log(formattedPrice);
              })
              .catch(error => console.error('Error fetching variant details:', error));  
        }
function updateDiamondPrices(diamondPriceContainer, selectedDiamondId) {
             // Fetch the selected variant details using the selected variant ID
                 fetch(`/admin/api/2024-01/products/${selectedDiamondId}.json`, {
                 headers: {
                    'X-Shopify-Access-Token': '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',
                  }
                })
              .then(response => response.json())
              .then(diamondData => {
                  // console.log(diamondData);
                  const formattedPrice = formatMoney(diamondData.product.variants[0].price);
                  diamondPriceContainer.innerHTML = `<label class="variant__label">Price:</label><span class="product__price">${formattedPrice}</span>`;
                  console.log(formattedPrice);
          }) 
}

function totalPrice(totalPriceContainer, selectedVariantId, selectedDiamondId) {
    let variantPrice, diamondPrice;

    fetch(`/admin/api/2024-01/variants/${selectedVariantId}.json`, {
            headers: {
                'X-Shopify-Access-Token': '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',
            }
        })
        .then(response => response.json())
        .then(variantData => {
          
            variantPrice = parseFloat(variantData.variant.price);
            return fetch(`/admin/api/2024-01/products/${selectedDiamondId}.json`, {
                headers: {
                    'X-Shopify-Access-Token': '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',
                }
            });
        })
        .then(response => response.json())
        .then(diamondData => {
            diamondPrice = parseFloat(diamondData.product.variants[0].price);

            const totalPrice = variantPrice + diamondPrice;
            const formattedTotalPrice = formatMoney(totalPrice);

            totalPriceContainer.innerHTML = `
                <label class="variant__label">Total Price:</label>
                <span class="product__price">${formattedTotalPrice}</span>`;
            console.log("Total Price:", formattedTotalPrice);
        })
        .catch(error => console.error('Error fetching details:', error));
}




function desc(diamondData, diamondDescContainer){
            diamondDescContainer.innerHTML = '';       
            const data = `${diamondData.product.body_html}`;
            const columns = data.split(/<br\s*(?:data-mce-fragment=['"]?1['"]?)?\s*\/?>/);    
            const selectedColumns = {};
            columns.forEach(column => {
               const [columnName, columnValue] = column.split(' : ');
               const selectedColumnNames = ['Stock No', 'Availability', 'Shape', 'Weight', 'Color', 'Clarity', 'Cut','Grade','Polish','Symmetry', 'Measurements', 'Lab'];
               if (selectedColumnNames.includes(columnName.trim())) {
                    selectedColumns[columnName.trim()] = columnValue.trim();
                }
              });
            let html = '';
            for (const columnName in selectedColumns) {
                html += `<p><strong>${columnName} :</strong> <span>${selectedColumns[columnName]}</span></p>`;
            }
            diamondDescContainer.innerHTML = `${html}`;
}
      
function updateURL(filterName, value) {
  
    var url = window.location.href.split('?')[0]; // Get the base URL
    var urlParams = new URLSearchParams(window.location.search);
    urlParams.delete(filterName);
    if (value !== undefined) {
        urlParams.set(filterName, encodeURIComponent(value));
    } else if (value !== undefined) {
        urlParams.set(filterName, encodeURIComponent(value));
    } 
    var newURL = url + '?' + urlParams.toString();
        newURL = newURL.replace(/%3B/g, ';');
        window.history.pushState({}, '', newURL);
    var filterValues = {value: value};
    sessionStorage.setItem(filterName, JSON.stringify(filterValues));
}

        // Function to add all products to cart



async function addToCart(productId, variantId, quantity) {
    const formData = new FormData();
    formData.append('id', variantId);
    formData.append('quantity', quantity);

    try {
        const response = await fetch('/cart/add', {
            method: 'POST',
            body: formData
        });

        if (response.ok) {
            console.log('Product added to cart successfully!');
        } else {
            console.error('Failed to add product to cart:', response.statusText);
        }
    } catch (error) {
        console.error('Error adding product to cart:', error);
    }
}

async function addAllProductsToCart() {
    const selectedRingId = localStorage.getItem('selectedRingId');
    const selectedVariantId = localStorage.getItem('selectedVariantId');
    const selectedDiamondId = localStorage.getItem('selectedDiamondId');
    const selectedDVariantId = localStorage.getItem('selectedDVariantId');

    const products = [
        { productId: selectedRingId, variantId: selectedVariantId, quantity: 1 },
        { productId: selectedDiamondId, variantId: selectedDVariantId, quantity: 1 },
        // Add more products as needed
    ];

    // Iterate through products and add them one by one
    for (const product of products) {
        await addToCart(product.productId, product.variantId, product.quantity);
    }
    window.location.href = '/cart';
}

     
document.addEventListener("DOMContentLoaded", function() {
      var currentPageURL = window.location.href;
    var targetElement = document.getElementById('complete-setting');
    var expectedURL = currentPageURL;
    if (currentPageURL === expectedURL) {
        targetElement.classList.add('active');
    }

  const urlParams = new URLSearchParams(window.location.search);
  const productId = urlParams.get('product_id');
  const selectedVariantContainer = document.getElementById('selected-variant-container');
  const selecteddiamondContainer = document.getElementById('selected-diamond-container');
        selectedVariantContainer.innerHtml = ""
  const selectedVariantId = localStorage.getItem('selectedVariantId');
  const selectedDVariantId = localStorage.getItem('selectedDVariantId');
  const selectedRingId = localStorage.getItem('selectedRingId');
  const selectedDiamondId = localStorage.getItem('selectedDiamondId');
  const totalPriceContainer = document.getElementById('subtotal');
  
  const resetBtn = document.getElementById('reset_btn');    
  const button = document.getElementById('add-to-cart-button');
        button.addEventListener('click', function() {
           button.innerHTML = '<span class="loader"></span> Adding ...';
            addAllProductsToCart();
         
        });
        resetBtn.addEventListener('click', function() {
        localStorage.clear();    
        window.location.href = 'https://ring-premier-one.myshopify.com/pages/ring-builder';
  });


  
    
  
 function updateHiddenFields(selectedRingId, selectedVariantId, selectedDiamondId,selectedDVariantId) {
        document.getElementById('product_id').value = selectedRingId;
        document.getElementById('variant_id').value = selectedVariantId;
        document.getElementById('diamond_id').value = selectedDiamondId;
        document.getElementById('diamond_v_id').value = selectedDVariantId;
 }
  
 fetch(`/admin/api/2024-01/products/${selectedRingId}.json`, {
                  headers: {
                      'X-Shopify-Access-Token': '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',
                  }
  })
              .then(response => response.json())
              .then(productData => {
  
                  const productTitle = document.getElementById('title');
                  
                  const productImagesContainer = document.getElementById('product-images-container');
                  const productVariantsContainer = document.getElementById('product-variants-container');
                  const centerstoneImagesContainer = document.getElementById('centerstone-images-container');
                  const centerstoneVariantsContainer = document.getElementById('centerstone-variants-container');
                  const productPriceContainer = document.getElementById('product-price');
                  const addToCartForm = document.getElementById('AddToCartForm');
                  const selectedVariant = productData.product.variants[0];
                  const selectedButton = document.getElementById('selectedButton');    
  
                        productTitle.innerHTML = `<h1 class="h2 product-single__title">${productData.product.title}</h1>`;  
                  if (productData.product.options[0].name !== "Title" && productData.product.options[0].values[0] !== "Default Title") {          
                      let optionIndex = 0;
                      productData.product.variants.forEach(variant => {
                        if(variant.id == selectedVariantId){
                            console.log(variant);
                              updateProductImages(productData, productImagesContainer, selectedVariantId);
                              updateProductPrices(productPriceContainer, selectedVariantId);
                              let optionString = '';
                                if (productData.product.options && productData.product.options.length > 0) {
                                  for (let i = 0; i < productData.product.options.length; i++) {
                                    const optionName = productData.product.options[i].name;
                                    const variantOption = variant[`option${i + 1}`];
                                    if (variantOption) {
                                      optionString += `<span>${optionName} : ${variantOption}</span><br>`;
                                    }
                                  }
                                }
                              const skuString = variant.sku ? `<span>Product Sku : ${variant.sku}</span><br>` : '';
                              productVariantsContainer.innerHTML = `
                              <div class="product-detail">
                                 ${skuString}
                                 ${optionString}
                              </div>
                            `;
                          }
                        optionIndex++; 
                          // productVariantsContainer.appendChild(variantWrapper);
                  
                      });
                 
                 }

              })
              .catch(error => console.error('Error fetching product details:', error));


        fetch(`/admin/api/2024-01/products/${selectedRingId}.json`, {
          headers: {
            'X-Shopify-Access-Token': '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',
          }
        })
        .then(response => response.json())
        .then(productData => {
    
             console.log(productData);
            const productTitle = productData.title || productData.product.title;
             const titleElement = selectedVariantContainer.querySelector('#product-title');
              titleElement.textContent = productTitle;
        })
        .catch(error => console.error('Error fetching variant details:', error));
  
        fetch(`/admin/api/2024-01/variants/${selectedVariantId}.json`, {
                        headers: {
                          'X-Shopify-Access-Token': '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',
                      }
                    })
        .then(response => response.json())
        .then(variantData => {
          const variantPrice = variantData.variant.price;
           const priceElement = selectedVariantContainer.querySelector('#variant-price');
                priceElement.textContent = formatMoney(variantPrice);
        })
        .catch(error => console.error('Error fetching variant details:', error));


        fetch(`/admin/api/2024-01/products/${selectedDiamondId}.json`, {
          headers: {
            'X-Shopify-Access-Token': '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',
          }
        })
        .then(response => response.json())
        .then(diamondData => {
             // const productTitle = diamondData.title || diamondData.product.title;
             const productTitle = diamondData.product.variants[0].sku ;
          
             const titleElement = selecteddiamondContainer.querySelector('#product-title');
             const linkElement = document.createElement('a');
                    linkElement.textContent = productTitle;
                    linkElement.href = 'https://ring-premier-one.myshopify.com/pages/diamond-detail?product_id='+ diamondData.product.id ; // Adjust the URL as needed
                  
                  // Append the <a> tag to the title element
                  titleElement.appendChild(linkElement);
                   // titleElement.textContent = productTitle;
          
             const variantPrice = diamondData.product.variants[0].price;
             const priceElement = selecteddiamondContainer.querySelector('#variant-price');
                   priceElement.textContent = formatMoney(variantPrice);

             const diamondTitle = document.getElementById('stone-title');
             // const productDescContainer = document.getElementById('product-desc');
             const diamondDescContainer = document.getElementById('stone-product-desc');
             const diamondPriceContainer = document.getElementById('stone-product-price');
             
             const centerstoneImagesContainer = document.getElementById('centerstone-images-container');
             const centerstoneVariantsContainer = document.getElementById('centerstone-variants-container');
                  
                  const selectedDVariant = diamondData.product.variants[0];
          
                  const selectedButton = document.getElementById('selectedButton');    
  
                   diamondTitle.innerHTML = `<h1 class="h2 product-single__title">${diamondData.product.title}</h1>`;
                       desc(diamondData, diamondDescContainer); 
                        
                      let optionIndex = 0;
                      diamondData.product.variants.forEach(variant => {
                        if(variant.id == selectedDVariant.id){
                          
                              updateDiamondImages(diamondData, centerstoneImagesContainer, selectedDiamondId);
                               updateDiamondPrices(diamondPriceContainer, selectedDiamondId);
                          
                          }
                        optionIndex++; 
                  
                      });   
        })
          totalPrice(totalPriceContainer, selectedVariantId, selectedDiamondId);
          updateHiddenFields(selectedRingId, selectedVariantId, selectedDiamondId, selectedDVariantId) 
  
  });

      </script>
  </body>
  </html>
