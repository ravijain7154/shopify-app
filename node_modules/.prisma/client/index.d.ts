
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model Product
 * 
 */
export type Product = $Result.DefaultSelection<Prisma.$ProductPayload>
/**
 * Model Rating
 * 
 */
export type Rating = $Result.DefaultSelection<Prisma.$RatingPayload>
/**
 * Model Diamond
 * 
 */
export type Diamond = $Result.DefaultSelection<Prisma.$DiamondPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Sessions
 * const sessions = await prisma.session.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Sessions
   * const sessions = await prisma.session.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs>;

  /**
   * `prisma.product`: Exposes CRUD operations for the **Product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): Prisma.ProductDelegate<ExtArgs>;

  /**
   * `prisma.rating`: Exposes CRUD operations for the **Rating** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ratings
    * const ratings = await prisma.rating.findMany()
    * ```
    */
  get rating(): Prisma.RatingDelegate<ExtArgs>;

  /**
   * `prisma.diamond`: Exposes CRUD operations for the **Diamond** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Diamonds
    * const diamonds = await prisma.diamond.findMany()
    * ```
    */
  get diamond(): Prisma.DiamondDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.19.0
   * Query Engine version: 5fe21811a6ba0b952a3bc71400666511fe3b902f
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Session: 'Session',
    Product: 'Product',
    Rating: 'Rating',
    Diamond: 'Diamond'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "session" | "product" | "rating" | "diamond"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      Product: {
        payload: Prisma.$ProductPayload<ExtArgs>
        fields: Prisma.ProductFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findFirst: {
            args: Prisma.ProductFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findMany: {
            args: Prisma.ProductFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          create: {
            args: Prisma.ProductCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          createMany: {
            args: Prisma.ProductCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ProductDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          update: {
            args: Prisma.ProductUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          deleteMany: {
            args: Prisma.ProductDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProductUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          aggregate: {
            args: Prisma.ProductAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProduct>
          }
          groupBy: {
            args: Prisma.ProductGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductCountArgs<ExtArgs>
            result: $Utils.Optional<ProductCountAggregateOutputType> | number
          }
        }
      }
      Rating: {
        payload: Prisma.$RatingPayload<ExtArgs>
        fields: Prisma.RatingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RatingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RatingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingPayload>
          }
          findFirst: {
            args: Prisma.RatingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RatingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingPayload>
          }
          findMany: {
            args: Prisma.RatingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingPayload>[]
          }
          create: {
            args: Prisma.RatingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingPayload>
          }
          createMany: {
            args: Prisma.RatingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.RatingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingPayload>
          }
          update: {
            args: Prisma.RatingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingPayload>
          }
          deleteMany: {
            args: Prisma.RatingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RatingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RatingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RatingPayload>
          }
          aggregate: {
            args: Prisma.RatingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRating>
          }
          groupBy: {
            args: Prisma.RatingGroupByArgs<ExtArgs>
            result: $Utils.Optional<RatingGroupByOutputType>[]
          }
          count: {
            args: Prisma.RatingCountArgs<ExtArgs>
            result: $Utils.Optional<RatingCountAggregateOutputType> | number
          }
        }
      }
      Diamond: {
        payload: Prisma.$DiamondPayload<ExtArgs>
        fields: Prisma.DiamondFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DiamondFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiamondPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DiamondFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiamondPayload>
          }
          findFirst: {
            args: Prisma.DiamondFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiamondPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DiamondFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiamondPayload>
          }
          findMany: {
            args: Prisma.DiamondFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiamondPayload>[]
          }
          create: {
            args: Prisma.DiamondCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiamondPayload>
          }
          createMany: {
            args: Prisma.DiamondCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.DiamondDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiamondPayload>
          }
          update: {
            args: Prisma.DiamondUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiamondPayload>
          }
          deleteMany: {
            args: Prisma.DiamondDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DiamondUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DiamondUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DiamondPayload>
          }
          aggregate: {
            args: Prisma.DiamondAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDiamond>
          }
          groupBy: {
            args: Prisma.DiamondGroupByArgs<ExtArgs>
            result: $Utils.Optional<DiamondGroupByOutputType>[]
          }
          count: {
            args: Prisma.DiamondCountArgs<ExtArgs>
            result: $Utils.Optional<DiamondCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionAvgAggregateOutputType = {
    userId: number | null
  }

  export type SessionSumAggregateOutputType = {
    userId: bigint | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    shop: string | null
    state: string | null
    isOnline: boolean | null
    scope: string | null
    expires: Date | null
    accessToken: string | null
    userId: bigint | null
    firstName: string | null
    lastName: string | null
    email: string | null
    accountOwner: boolean | null
    locale: string | null
    collaborator: boolean | null
    emailVerified: boolean | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    shop: string | null
    state: string | null
    isOnline: boolean | null
    scope: string | null
    expires: Date | null
    accessToken: string | null
    userId: bigint | null
    firstName: string | null
    lastName: string | null
    email: string | null
    accountOwner: boolean | null
    locale: string | null
    collaborator: boolean | null
    emailVerified: boolean | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    shop: number
    state: number
    isOnline: number
    scope: number
    expires: number
    accessToken: number
    userId: number
    firstName: number
    lastName: number
    email: number
    accountOwner: number
    locale: number
    collaborator: number
    emailVerified: number
    _all: number
  }


  export type SessionAvgAggregateInputType = {
    userId?: true
  }

  export type SessionSumAggregateInputType = {
    userId?: true
  }

  export type SessionMinAggregateInputType = {
    id?: true
    shop?: true
    state?: true
    isOnline?: true
    scope?: true
    expires?: true
    accessToken?: true
    userId?: true
    firstName?: true
    lastName?: true
    email?: true
    accountOwner?: true
    locale?: true
    collaborator?: true
    emailVerified?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    shop?: true
    state?: true
    isOnline?: true
    scope?: true
    expires?: true
    accessToken?: true
    userId?: true
    firstName?: true
    lastName?: true
    email?: true
    accountOwner?: true
    locale?: true
    collaborator?: true
    emailVerified?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    shop?: true
    state?: true
    isOnline?: true
    scope?: true
    expires?: true
    accessToken?: true
    userId?: true
    firstName?: true
    lastName?: true
    email?: true
    accountOwner?: true
    locale?: true
    collaborator?: true
    emailVerified?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _avg?: SessionAvgAggregateInputType
    _sum?: SessionSumAggregateInputType
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: string
    shop: string
    state: string
    isOnline: boolean
    scope: string | null
    expires: Date | null
    accessToken: string
    userId: bigint | null
    firstName: string | null
    lastName: string | null
    email: string | null
    accountOwner: boolean
    locale: string | null
    collaborator: boolean | null
    emailVerified: boolean | null
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    shop?: boolean
    state?: boolean
    isOnline?: boolean
    scope?: boolean
    expires?: boolean
    accessToken?: boolean
    userId?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    accountOwner?: boolean
    locale?: boolean
    collaborator?: boolean
    emailVerified?: boolean
  }, ExtArgs["result"]["session"]>


  export type SessionSelectScalar = {
    id?: boolean
    shop?: boolean
    state?: boolean
    isOnline?: boolean
    scope?: boolean
    expires?: boolean
    accessToken?: boolean
    userId?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    accountOwner?: boolean
    locale?: boolean
    collaborator?: boolean
    emailVerified?: boolean
  }


  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      shop: string
      state: string
      isOnline: boolean
      scope: string | null
      expires: Date | null
      accessToken: string
      userId: bigint | null
      firstName: string | null
      lastName: string | null
      email: string | null
      accountOwner: boolean
      locale: string | null
      collaborator: boolean | null
      emailVerified: boolean | null
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */ 
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'String'>
    readonly shop: FieldRef<"Session", 'String'>
    readonly state: FieldRef<"Session", 'String'>
    readonly isOnline: FieldRef<"Session", 'Boolean'>
    readonly scope: FieldRef<"Session", 'String'>
    readonly expires: FieldRef<"Session", 'DateTime'>
    readonly accessToken: FieldRef<"Session", 'String'>
    readonly userId: FieldRef<"Session", 'BigInt'>
    readonly firstName: FieldRef<"Session", 'String'>
    readonly lastName: FieldRef<"Session", 'String'>
    readonly email: FieldRef<"Session", 'String'>
    readonly accountOwner: FieldRef<"Session", 'Boolean'>
    readonly locale: FieldRef<"Session", 'String'>
    readonly collaborator: FieldRef<"Session", 'Boolean'>
    readonly emailVerified: FieldRef<"Session", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
  }


  /**
   * Model Product
   */

  export type AggregateProduct = {
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  export type ProductAvgAggregateOutputType = {
    id: number | null
    price: number | null
    ratingId: number | null
  }

  export type ProductSumAggregateOutputType = {
    id: number | null
    price: number | null
    ratingId: number | null
  }

  export type ProductMinAggregateOutputType = {
    id: number | null
    title: string | null
    price: number | null
    description: string | null
    category: string | null
    image: string | null
    ratingId: number | null
  }

  export type ProductMaxAggregateOutputType = {
    id: number | null
    title: string | null
    price: number | null
    description: string | null
    category: string | null
    image: string | null
    ratingId: number | null
  }

  export type ProductCountAggregateOutputType = {
    id: number
    title: number
    price: number
    description: number
    category: number
    image: number
    ratingId: number
    _all: number
  }


  export type ProductAvgAggregateInputType = {
    id?: true
    price?: true
    ratingId?: true
  }

  export type ProductSumAggregateInputType = {
    id?: true
    price?: true
    ratingId?: true
  }

  export type ProductMinAggregateInputType = {
    id?: true
    title?: true
    price?: true
    description?: true
    category?: true
    image?: true
    ratingId?: true
  }

  export type ProductMaxAggregateInputType = {
    id?: true
    title?: true
    price?: true
    description?: true
    category?: true
    image?: true
    ratingId?: true
  }

  export type ProductCountAggregateInputType = {
    id?: true
    title?: true
    price?: true
    description?: true
    category?: true
    image?: true
    ratingId?: true
    _all?: true
  }

  export type ProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Product to aggregate.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Products
    **/
    _count?: true | ProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductMaxAggregateInputType
  }

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>
  }




  export type ProductGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithAggregationInput | ProductOrderByWithAggregationInput[]
    by: ProductScalarFieldEnum[] | ProductScalarFieldEnum
    having?: ProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCountAggregateInputType | true
    _avg?: ProductAvgAggregateInputType
    _sum?: ProductSumAggregateInputType
    _min?: ProductMinAggregateInputType
    _max?: ProductMaxAggregateInputType
  }

  export type ProductGroupByOutputType = {
    id: number
    title: string
    price: number
    description: string
    category: string
    image: string
    ratingId: number | null
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  type GetProductGroupByPayload<T extends ProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductGroupByOutputType[P]>
            : GetScalarType<T[P], ProductGroupByOutputType[P]>
        }
      >
    >


  export type ProductSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    price?: boolean
    description?: boolean
    category?: boolean
    image?: boolean
    ratingId?: boolean
    rating?: boolean | Product$ratingArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>


  export type ProductSelectScalar = {
    id?: boolean
    title?: boolean
    price?: boolean
    description?: boolean
    category?: boolean
    image?: boolean
    ratingId?: boolean
  }

  export type ProductInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rating?: boolean | Product$ratingArgs<ExtArgs>
  }

  export type $ProductPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Product"
    objects: {
      rating: Prisma.$RatingPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      price: number
      description: string
      category: string
      image: string
      ratingId: number | null
    }, ExtArgs["result"]["product"]>
    composites: {}
  }

  type ProductGetPayload<S extends boolean | null | undefined | ProductDefaultArgs> = $Result.GetResult<Prisma.$ProductPayload, S>

  type ProductCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProductFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProductCountAggregateInputType | true
    }

  export interface ProductDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Product'], meta: { name: 'Product' } }
    /**
     * Find zero or one Product that matches the filter.
     * @param {ProductFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductFindUniqueArgs>(args: SelectSubset<T, ProductFindUniqueArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Product that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProductFindUniqueOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductFindFirstArgs>(args?: SelectSubset<T, ProductFindFirstArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Product that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productWithIdOnly = await prisma.product.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProductFindManyArgs>(args?: SelectSubset<T, ProductFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Product.
     * @param {ProductCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     * 
     */
    create<T extends ProductCreateArgs>(args: SelectSubset<T, ProductCreateArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Products.
     * @param {ProductCreateManyArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductCreateManyArgs>(args?: SelectSubset<T, ProductCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Product.
     * @param {ProductDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     * 
     */
    delete<T extends ProductDeleteArgs>(args: SelectSubset<T, ProductDeleteArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Product.
     * @param {ProductUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductUpdateArgs>(args: SelectSubset<T, ProductUpdateArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Products.
     * @param {ProductDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductDeleteManyArgs>(args?: SelectSubset<T, ProductDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductUpdateManyArgs>(args: SelectSubset<T, ProductUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Product.
     * @param {ProductUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
     */
    upsert<T extends ProductUpsertArgs>(args: SelectSubset<T, ProductUpsertArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends ProductCountArgs>(
      args?: Subset<T, ProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAggregateArgs>(args: Subset<T, ProductAggregateArgs>): Prisma.PrismaPromise<GetProductAggregateType<T>>

    /**
     * Group by Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductGroupByArgs['orderBy'] }
        : { orderBy?: ProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Product model
   */
  readonly fields: ProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    rating<T extends Product$ratingArgs<ExtArgs> = {}>(args?: Subset<T, Product$ratingArgs<ExtArgs>>): Prisma__RatingClient<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Product model
   */ 
  interface ProductFieldRefs {
    readonly id: FieldRef<"Product", 'Int'>
    readonly title: FieldRef<"Product", 'String'>
    readonly price: FieldRef<"Product", 'Float'>
    readonly description: FieldRef<"Product", 'String'>
    readonly category: FieldRef<"Product", 'String'>
    readonly image: FieldRef<"Product", 'String'>
    readonly ratingId: FieldRef<"Product", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Product findUnique
   */
  export type ProductFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findUniqueOrThrow
   */
  export type ProductFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findFirst
   */
  export type ProductFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findFirstOrThrow
   */
  export type ProductFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findMany
   */
  export type ProductFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Products to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product create
   */
  export type ProductCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to create a Product.
     */
    data: XOR<ProductCreateInput, ProductUncheckedCreateInput>
  }

  /**
   * Product createMany
   */
  export type ProductCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Product update
   */
  export type ProductUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to update a Product.
     */
    data: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
    /**
     * Choose, which Product to update.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product updateMany
   */
  export type ProductUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Products.
     */
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     */
    where?: ProductWhereInput
  }

  /**
   * Product upsert
   */
  export type ProductUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The filter to search for the Product to update in case it exists.
     */
    where: ProductWhereUniqueInput
    /**
     * In case the Product found by the `where` argument doesn't exist, create a new Product with this data.
     */
    create: XOR<ProductCreateInput, ProductUncheckedCreateInput>
    /**
     * In case the Product was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
  }

  /**
   * Product delete
   */
  export type ProductDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter which Product to delete.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product deleteMany
   */
  export type ProductDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Products to delete
     */
    where?: ProductWhereInput
  }

  /**
   * Product.rating
   */
  export type Product$ratingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingInclude<ExtArgs> | null
    where?: RatingWhereInput
  }

  /**
   * Product without action
   */
  export type ProductDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
  }


  /**
   * Model Rating
   */

  export type AggregateRating = {
    _count: RatingCountAggregateOutputType | null
    _avg: RatingAvgAggregateOutputType | null
    _sum: RatingSumAggregateOutputType | null
    _min: RatingMinAggregateOutputType | null
    _max: RatingMaxAggregateOutputType | null
  }

  export type RatingAvgAggregateOutputType = {
    id: number | null
    rate: number | null
    count: number | null
    productId: number | null
  }

  export type RatingSumAggregateOutputType = {
    id: number | null
    rate: number | null
    count: number | null
    productId: number | null
  }

  export type RatingMinAggregateOutputType = {
    id: number | null
    rate: number | null
    count: number | null
    productId: number | null
  }

  export type RatingMaxAggregateOutputType = {
    id: number | null
    rate: number | null
    count: number | null
    productId: number | null
  }

  export type RatingCountAggregateOutputType = {
    id: number
    rate: number
    count: number
    productId: number
    _all: number
  }


  export type RatingAvgAggregateInputType = {
    id?: true
    rate?: true
    count?: true
    productId?: true
  }

  export type RatingSumAggregateInputType = {
    id?: true
    rate?: true
    count?: true
    productId?: true
  }

  export type RatingMinAggregateInputType = {
    id?: true
    rate?: true
    count?: true
    productId?: true
  }

  export type RatingMaxAggregateInputType = {
    id?: true
    rate?: true
    count?: true
    productId?: true
  }

  export type RatingCountAggregateInputType = {
    id?: true
    rate?: true
    count?: true
    productId?: true
    _all?: true
  }

  export type RatingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Rating to aggregate.
     */
    where?: RatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ratings to fetch.
     */
    orderBy?: RatingOrderByWithRelationInput | RatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ratings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ratings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Ratings
    **/
    _count?: true | RatingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RatingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RatingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RatingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RatingMaxAggregateInputType
  }

  export type GetRatingAggregateType<T extends RatingAggregateArgs> = {
        [P in keyof T & keyof AggregateRating]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRating[P]>
      : GetScalarType<T[P], AggregateRating[P]>
  }




  export type RatingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RatingWhereInput
    orderBy?: RatingOrderByWithAggregationInput | RatingOrderByWithAggregationInput[]
    by: RatingScalarFieldEnum[] | RatingScalarFieldEnum
    having?: RatingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RatingCountAggregateInputType | true
    _avg?: RatingAvgAggregateInputType
    _sum?: RatingSumAggregateInputType
    _min?: RatingMinAggregateInputType
    _max?: RatingMaxAggregateInputType
  }

  export type RatingGroupByOutputType = {
    id: number
    rate: number
    count: number
    productId: number | null
    _count: RatingCountAggregateOutputType | null
    _avg: RatingAvgAggregateOutputType | null
    _sum: RatingSumAggregateOutputType | null
    _min: RatingMinAggregateOutputType | null
    _max: RatingMaxAggregateOutputType | null
  }

  type GetRatingGroupByPayload<T extends RatingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RatingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RatingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RatingGroupByOutputType[P]>
            : GetScalarType<T[P], RatingGroupByOutputType[P]>
        }
      >
    >


  export type RatingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    rate?: boolean
    count?: boolean
    productId?: boolean
    product?: boolean | Rating$productArgs<ExtArgs>
  }, ExtArgs["result"]["rating"]>


  export type RatingSelectScalar = {
    id?: boolean
    rate?: boolean
    count?: boolean
    productId?: boolean
  }

  export type RatingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | Rating$productArgs<ExtArgs>
  }

  export type $RatingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Rating"
    objects: {
      product: Prisma.$ProductPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      rate: number
      count: number
      productId: number | null
    }, ExtArgs["result"]["rating"]>
    composites: {}
  }

  type RatingGetPayload<S extends boolean | null | undefined | RatingDefaultArgs> = $Result.GetResult<Prisma.$RatingPayload, S>

  type RatingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RatingFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RatingCountAggregateInputType | true
    }

  export interface RatingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Rating'], meta: { name: 'Rating' } }
    /**
     * Find zero or one Rating that matches the filter.
     * @param {RatingFindUniqueArgs} args - Arguments to find a Rating
     * @example
     * // Get one Rating
     * const rating = await prisma.rating.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RatingFindUniqueArgs>(args: SelectSubset<T, RatingFindUniqueArgs<ExtArgs>>): Prisma__RatingClient<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Rating that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RatingFindUniqueOrThrowArgs} args - Arguments to find a Rating
     * @example
     * // Get one Rating
     * const rating = await prisma.rating.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RatingFindUniqueOrThrowArgs>(args: SelectSubset<T, RatingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RatingClient<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Rating that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingFindFirstArgs} args - Arguments to find a Rating
     * @example
     * // Get one Rating
     * const rating = await prisma.rating.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RatingFindFirstArgs>(args?: SelectSubset<T, RatingFindFirstArgs<ExtArgs>>): Prisma__RatingClient<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Rating that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingFindFirstOrThrowArgs} args - Arguments to find a Rating
     * @example
     * // Get one Rating
     * const rating = await prisma.rating.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RatingFindFirstOrThrowArgs>(args?: SelectSubset<T, RatingFindFirstOrThrowArgs<ExtArgs>>): Prisma__RatingClient<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Ratings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ratings
     * const ratings = await prisma.rating.findMany()
     * 
     * // Get first 10 Ratings
     * const ratings = await prisma.rating.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ratingWithIdOnly = await prisma.rating.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RatingFindManyArgs>(args?: SelectSubset<T, RatingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Rating.
     * @param {RatingCreateArgs} args - Arguments to create a Rating.
     * @example
     * // Create one Rating
     * const Rating = await prisma.rating.create({
     *   data: {
     *     // ... data to create a Rating
     *   }
     * })
     * 
     */
    create<T extends RatingCreateArgs>(args: SelectSubset<T, RatingCreateArgs<ExtArgs>>): Prisma__RatingClient<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Ratings.
     * @param {RatingCreateManyArgs} args - Arguments to create many Ratings.
     * @example
     * // Create many Ratings
     * const rating = await prisma.rating.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RatingCreateManyArgs>(args?: SelectSubset<T, RatingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Rating.
     * @param {RatingDeleteArgs} args - Arguments to delete one Rating.
     * @example
     * // Delete one Rating
     * const Rating = await prisma.rating.delete({
     *   where: {
     *     // ... filter to delete one Rating
     *   }
     * })
     * 
     */
    delete<T extends RatingDeleteArgs>(args: SelectSubset<T, RatingDeleteArgs<ExtArgs>>): Prisma__RatingClient<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Rating.
     * @param {RatingUpdateArgs} args - Arguments to update one Rating.
     * @example
     * // Update one Rating
     * const rating = await prisma.rating.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RatingUpdateArgs>(args: SelectSubset<T, RatingUpdateArgs<ExtArgs>>): Prisma__RatingClient<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Ratings.
     * @param {RatingDeleteManyArgs} args - Arguments to filter Ratings to delete.
     * @example
     * // Delete a few Ratings
     * const { count } = await prisma.rating.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RatingDeleteManyArgs>(args?: SelectSubset<T, RatingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ratings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ratings
     * const rating = await prisma.rating.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RatingUpdateManyArgs>(args: SelectSubset<T, RatingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Rating.
     * @param {RatingUpsertArgs} args - Arguments to update or create a Rating.
     * @example
     * // Update or create a Rating
     * const rating = await prisma.rating.upsert({
     *   create: {
     *     // ... data to create a Rating
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Rating we want to update
     *   }
     * })
     */
    upsert<T extends RatingUpsertArgs>(args: SelectSubset<T, RatingUpsertArgs<ExtArgs>>): Prisma__RatingClient<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Ratings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingCountArgs} args - Arguments to filter Ratings to count.
     * @example
     * // Count the number of Ratings
     * const count = await prisma.rating.count({
     *   where: {
     *     // ... the filter for the Ratings we want to count
     *   }
     * })
    **/
    count<T extends RatingCountArgs>(
      args?: Subset<T, RatingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RatingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Rating.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RatingAggregateArgs>(args: Subset<T, RatingAggregateArgs>): Prisma.PrismaPromise<GetRatingAggregateType<T>>

    /**
     * Group by Rating.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RatingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RatingGroupByArgs['orderBy'] }
        : { orderBy?: RatingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RatingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRatingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Rating model
   */
  readonly fields: RatingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Rating.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RatingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    product<T extends Rating$productArgs<ExtArgs> = {}>(args?: Subset<T, Rating$productArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Rating model
   */ 
  interface RatingFieldRefs {
    readonly id: FieldRef<"Rating", 'Int'>
    readonly rate: FieldRef<"Rating", 'Float'>
    readonly count: FieldRef<"Rating", 'Int'>
    readonly productId: FieldRef<"Rating", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Rating findUnique
   */
  export type RatingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * Filter, which Rating to fetch.
     */
    where: RatingWhereUniqueInput
  }

  /**
   * Rating findUniqueOrThrow
   */
  export type RatingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * Filter, which Rating to fetch.
     */
    where: RatingWhereUniqueInput
  }

  /**
   * Rating findFirst
   */
  export type RatingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * Filter, which Rating to fetch.
     */
    where?: RatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ratings to fetch.
     */
    orderBy?: RatingOrderByWithRelationInput | RatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ratings.
     */
    cursor?: RatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ratings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ratings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ratings.
     */
    distinct?: RatingScalarFieldEnum | RatingScalarFieldEnum[]
  }

  /**
   * Rating findFirstOrThrow
   */
  export type RatingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * Filter, which Rating to fetch.
     */
    where?: RatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ratings to fetch.
     */
    orderBy?: RatingOrderByWithRelationInput | RatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ratings.
     */
    cursor?: RatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ratings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ratings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ratings.
     */
    distinct?: RatingScalarFieldEnum | RatingScalarFieldEnum[]
  }

  /**
   * Rating findMany
   */
  export type RatingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * Filter, which Ratings to fetch.
     */
    where?: RatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ratings to fetch.
     */
    orderBy?: RatingOrderByWithRelationInput | RatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Ratings.
     */
    cursor?: RatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ratings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ratings.
     */
    skip?: number
    distinct?: RatingScalarFieldEnum | RatingScalarFieldEnum[]
  }

  /**
   * Rating create
   */
  export type RatingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * The data needed to create a Rating.
     */
    data: XOR<RatingCreateInput, RatingUncheckedCreateInput>
  }

  /**
   * Rating createMany
   */
  export type RatingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Ratings.
     */
    data: RatingCreateManyInput | RatingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Rating update
   */
  export type RatingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * The data needed to update a Rating.
     */
    data: XOR<RatingUpdateInput, RatingUncheckedUpdateInput>
    /**
     * Choose, which Rating to update.
     */
    where: RatingWhereUniqueInput
  }

  /**
   * Rating updateMany
   */
  export type RatingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Ratings.
     */
    data: XOR<RatingUpdateManyMutationInput, RatingUncheckedUpdateManyInput>
    /**
     * Filter which Ratings to update
     */
    where?: RatingWhereInput
  }

  /**
   * Rating upsert
   */
  export type RatingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * The filter to search for the Rating to update in case it exists.
     */
    where: RatingWhereUniqueInput
    /**
     * In case the Rating found by the `where` argument doesn't exist, create a new Rating with this data.
     */
    create: XOR<RatingCreateInput, RatingUncheckedCreateInput>
    /**
     * In case the Rating was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RatingUpdateInput, RatingUncheckedUpdateInput>
  }

  /**
   * Rating delete
   */
  export type RatingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * Filter which Rating to delete.
     */
    where: RatingWhereUniqueInput
  }

  /**
   * Rating deleteMany
   */
  export type RatingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ratings to delete
     */
    where?: RatingWhereInput
  }

  /**
   * Rating.product
   */
  export type Rating$productArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    where?: ProductWhereInput
  }

  /**
   * Rating without action
   */
  export type RatingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RatingInclude<ExtArgs> | null
  }


  /**
   * Model Diamond
   */

  export type AggregateDiamond = {
    _count: DiamondCountAggregateOutputType | null
    _avg: DiamondAvgAggregateOutputType | null
    _sum: DiamondSumAggregateOutputType | null
    _min: DiamondMinAggregateOutputType | null
    _max: DiamondMaxAggregateOutputType | null
  }

  export type DiamondAvgAggregateOutputType = {
    id: number | null
    Weight: number | null
    DEPTH_PER: number | null
    TABLE_PER: number | null
    Girdle_Min: number | null
    Girdle_Max: number | null
    Girdle_Per: number | null
    Crown_Height: number | null
    Crown_Angle: number | null
    Pavilion_Depth: number | null
    Pavilion_Angle: number | null
    Ratio: number | null
    Modified_Rate: number | null
    wire_discount_price: number | null
    Rap_Price: number | null
    Memo_Price: number | null
    Memo_Discount_PER: number | null
    Buy_Price: number | null
    Buy_Price_Discount_PER: number | null
    COD_Buy_Price: number | null
    COD_Buy_Price_Discount_PER: number | null
  }

  export type DiamondSumAggregateOutputType = {
    id: number | null
    Weight: number | null
    DEPTH_PER: number | null
    TABLE_PER: number | null
    Girdle_Min: number | null
    Girdle_Max: number | null
    Girdle_Per: number | null
    Crown_Height: number | null
    Crown_Angle: number | null
    Pavilion_Depth: number | null
    Pavilion_Angle: number | null
    Ratio: number | null
    Modified_Rate: number | null
    wire_discount_price: number | null
    Rap_Price: number | null
    Memo_Price: number | null
    Memo_Discount_PER: number | null
    Buy_Price: number | null
    Buy_Price_Discount_PER: number | null
    COD_Buy_Price: number | null
    COD_Buy_Price_Discount_PER: number | null
  }

  export type DiamondMinAggregateOutputType = {
    id: number | null
    Stock_No: string | null
    Availability: string | null
    Shape: string | null
    Weight: number | null
    Color: string | null
    Clarity: string | null
    Cut_Grade: string | null
    Polish: string | null
    Symmetry: string | null
    Fluorescence_Intensity: string | null
    Fluorescence_Color: string | null
    Measurements: string | null
    Lab: string | null
    Treatment: string | null
    FancyColor: string | null
    Fancy_Color_Intensity: string | null
    FancyColorOvertone: string | null
    DEPTH_PER: number | null
    TABLE_PER: number | null
    Girdle_Min: number | null
    Girdle_Max: number | null
    Girdle_Per: number | null
    Girdle_Condition: string | null
    Culet_Size: string | null
    Culet_Condition: string | null
    Crown_Height: number | null
    Crown_Angle: number | null
    Pavilion_Depth: number | null
    Pavilion_Angle: number | null
    Cert_Comments: string | null
    Country: string | null
    State: string | null
    City: string | null
    Country_Of_Origin: string | null
    Key_To_Symbols: string | null
    Shade: string | null
    Star_Length: string | null
    Report_Issue_Date: Date | null
    Report_Type: string | null
    Milky: string | null
    Eye_Clean: string | null
    Gemprint_ID: string | null
    BGM: string | null
    Ratio: number | null
    Diamond_Type: string | null
    Member_Comments: string | null
    Time_to_Location: string | null
    LsMatchedPairSeparable: string | null
    Pair_Stock: string | null
    Allow_Raplink_Feed: string | null
    Parcel_Stones: string | null
    Center_Inclusion: string | null
    Black_Inclusion: string | null
    Lab_Location: string | null
    Brand: string | null
    Sarine_Name: string | null
    Internal_Clarity_Desc_Code: string | null
    Clarity_Description: string | null
    Modified_Rate: number | null
    wire_discount_price: number | null
    ImageLink: string | null
    VideoLink: string | null
    Video_HTML: string | null
    CertificateLink: string | null
    Rap_Price: number | null
    Memo_Price: number | null
    Memo_Discount_PER: number | null
    Buy_Price: number | null
    Buy_Price_Discount_PER: number | null
    COD_Buy_Price: number | null
    COD_Buy_Price_Discount_PER: number | null
    Certificate: string | null
  }

  export type DiamondMaxAggregateOutputType = {
    id: number | null
    Stock_No: string | null
    Availability: string | null
    Shape: string | null
    Weight: number | null
    Color: string | null
    Clarity: string | null
    Cut_Grade: string | null
    Polish: string | null
    Symmetry: string | null
    Fluorescence_Intensity: string | null
    Fluorescence_Color: string | null
    Measurements: string | null
    Lab: string | null
    Treatment: string | null
    FancyColor: string | null
    Fancy_Color_Intensity: string | null
    FancyColorOvertone: string | null
    DEPTH_PER: number | null
    TABLE_PER: number | null
    Girdle_Min: number | null
    Girdle_Max: number | null
    Girdle_Per: number | null
    Girdle_Condition: string | null
    Culet_Size: string | null
    Culet_Condition: string | null
    Crown_Height: number | null
    Crown_Angle: number | null
    Pavilion_Depth: number | null
    Pavilion_Angle: number | null
    Cert_Comments: string | null
    Country: string | null
    State: string | null
    City: string | null
    Country_Of_Origin: string | null
    Key_To_Symbols: string | null
    Shade: string | null
    Star_Length: string | null
    Report_Issue_Date: Date | null
    Report_Type: string | null
    Milky: string | null
    Eye_Clean: string | null
    Gemprint_ID: string | null
    BGM: string | null
    Ratio: number | null
    Diamond_Type: string | null
    Member_Comments: string | null
    Time_to_Location: string | null
    LsMatchedPairSeparable: string | null
    Pair_Stock: string | null
    Allow_Raplink_Feed: string | null
    Parcel_Stones: string | null
    Center_Inclusion: string | null
    Black_Inclusion: string | null
    Lab_Location: string | null
    Brand: string | null
    Sarine_Name: string | null
    Internal_Clarity_Desc_Code: string | null
    Clarity_Description: string | null
    Modified_Rate: number | null
    wire_discount_price: number | null
    ImageLink: string | null
    VideoLink: string | null
    Video_HTML: string | null
    CertificateLink: string | null
    Rap_Price: number | null
    Memo_Price: number | null
    Memo_Discount_PER: number | null
    Buy_Price: number | null
    Buy_Price_Discount_PER: number | null
    COD_Buy_Price: number | null
    COD_Buy_Price_Discount_PER: number | null
    Certificate: string | null
  }

  export type DiamondCountAggregateOutputType = {
    id: number
    Stock_No: number
    Availability: number
    Shape: number
    Weight: number
    Color: number
    Clarity: number
    Cut_Grade: number
    Polish: number
    Symmetry: number
    Fluorescence_Intensity: number
    Fluorescence_Color: number
    Measurements: number
    Lab: number
    Treatment: number
    FancyColor: number
    Fancy_Color_Intensity: number
    FancyColorOvertone: number
    DEPTH_PER: number
    TABLE_PER: number
    Girdle_Min: number
    Girdle_Max: number
    Girdle_Per: number
    Girdle_Condition: number
    Culet_Size: number
    Culet_Condition: number
    Crown_Height: number
    Crown_Angle: number
    Pavilion_Depth: number
    Pavilion_Angle: number
    Cert_Comments: number
    Country: number
    State: number
    City: number
    Country_Of_Origin: number
    Key_To_Symbols: number
    Shade: number
    Star_Length: number
    Report_Issue_Date: number
    Report_Type: number
    Milky: number
    Eye_Clean: number
    Gemprint_ID: number
    BGM: number
    Ratio: number
    Diamond_Type: number
    Member_Comments: number
    Time_to_Location: number
    LsMatchedPairSeparable: number
    Pair_Stock: number
    Allow_Raplink_Feed: number
    Parcel_Stones: number
    Center_Inclusion: number
    Black_Inclusion: number
    Lab_Location: number
    Brand: number
    Sarine_Name: number
    Internal_Clarity_Desc_Code: number
    Clarity_Description: number
    Modified_Rate: number
    wire_discount_price: number
    ImageLink: number
    VideoLink: number
    Video_HTML: number
    CertificateLink: number
    Rap_Price: number
    Memo_Price: number
    Memo_Discount_PER: number
    Buy_Price: number
    Buy_Price_Discount_PER: number
    COD_Buy_Price: number
    COD_Buy_Price_Discount_PER: number
    Certificate: number
    _all: number
  }


  export type DiamondAvgAggregateInputType = {
    id?: true
    Weight?: true
    DEPTH_PER?: true
    TABLE_PER?: true
    Girdle_Min?: true
    Girdle_Max?: true
    Girdle_Per?: true
    Crown_Height?: true
    Crown_Angle?: true
    Pavilion_Depth?: true
    Pavilion_Angle?: true
    Ratio?: true
    Modified_Rate?: true
    wire_discount_price?: true
    Rap_Price?: true
    Memo_Price?: true
    Memo_Discount_PER?: true
    Buy_Price?: true
    Buy_Price_Discount_PER?: true
    COD_Buy_Price?: true
    COD_Buy_Price_Discount_PER?: true
  }

  export type DiamondSumAggregateInputType = {
    id?: true
    Weight?: true
    DEPTH_PER?: true
    TABLE_PER?: true
    Girdle_Min?: true
    Girdle_Max?: true
    Girdle_Per?: true
    Crown_Height?: true
    Crown_Angle?: true
    Pavilion_Depth?: true
    Pavilion_Angle?: true
    Ratio?: true
    Modified_Rate?: true
    wire_discount_price?: true
    Rap_Price?: true
    Memo_Price?: true
    Memo_Discount_PER?: true
    Buy_Price?: true
    Buy_Price_Discount_PER?: true
    COD_Buy_Price?: true
    COD_Buy_Price_Discount_PER?: true
  }

  export type DiamondMinAggregateInputType = {
    id?: true
    Stock_No?: true
    Availability?: true
    Shape?: true
    Weight?: true
    Color?: true
    Clarity?: true
    Cut_Grade?: true
    Polish?: true
    Symmetry?: true
    Fluorescence_Intensity?: true
    Fluorescence_Color?: true
    Measurements?: true
    Lab?: true
    Treatment?: true
    FancyColor?: true
    Fancy_Color_Intensity?: true
    FancyColorOvertone?: true
    DEPTH_PER?: true
    TABLE_PER?: true
    Girdle_Min?: true
    Girdle_Max?: true
    Girdle_Per?: true
    Girdle_Condition?: true
    Culet_Size?: true
    Culet_Condition?: true
    Crown_Height?: true
    Crown_Angle?: true
    Pavilion_Depth?: true
    Pavilion_Angle?: true
    Cert_Comments?: true
    Country?: true
    State?: true
    City?: true
    Country_Of_Origin?: true
    Key_To_Symbols?: true
    Shade?: true
    Star_Length?: true
    Report_Issue_Date?: true
    Report_Type?: true
    Milky?: true
    Eye_Clean?: true
    Gemprint_ID?: true
    BGM?: true
    Ratio?: true
    Diamond_Type?: true
    Member_Comments?: true
    Time_to_Location?: true
    LsMatchedPairSeparable?: true
    Pair_Stock?: true
    Allow_Raplink_Feed?: true
    Parcel_Stones?: true
    Center_Inclusion?: true
    Black_Inclusion?: true
    Lab_Location?: true
    Brand?: true
    Sarine_Name?: true
    Internal_Clarity_Desc_Code?: true
    Clarity_Description?: true
    Modified_Rate?: true
    wire_discount_price?: true
    ImageLink?: true
    VideoLink?: true
    Video_HTML?: true
    CertificateLink?: true
    Rap_Price?: true
    Memo_Price?: true
    Memo_Discount_PER?: true
    Buy_Price?: true
    Buy_Price_Discount_PER?: true
    COD_Buy_Price?: true
    COD_Buy_Price_Discount_PER?: true
    Certificate?: true
  }

  export type DiamondMaxAggregateInputType = {
    id?: true
    Stock_No?: true
    Availability?: true
    Shape?: true
    Weight?: true
    Color?: true
    Clarity?: true
    Cut_Grade?: true
    Polish?: true
    Symmetry?: true
    Fluorescence_Intensity?: true
    Fluorescence_Color?: true
    Measurements?: true
    Lab?: true
    Treatment?: true
    FancyColor?: true
    Fancy_Color_Intensity?: true
    FancyColorOvertone?: true
    DEPTH_PER?: true
    TABLE_PER?: true
    Girdle_Min?: true
    Girdle_Max?: true
    Girdle_Per?: true
    Girdle_Condition?: true
    Culet_Size?: true
    Culet_Condition?: true
    Crown_Height?: true
    Crown_Angle?: true
    Pavilion_Depth?: true
    Pavilion_Angle?: true
    Cert_Comments?: true
    Country?: true
    State?: true
    City?: true
    Country_Of_Origin?: true
    Key_To_Symbols?: true
    Shade?: true
    Star_Length?: true
    Report_Issue_Date?: true
    Report_Type?: true
    Milky?: true
    Eye_Clean?: true
    Gemprint_ID?: true
    BGM?: true
    Ratio?: true
    Diamond_Type?: true
    Member_Comments?: true
    Time_to_Location?: true
    LsMatchedPairSeparable?: true
    Pair_Stock?: true
    Allow_Raplink_Feed?: true
    Parcel_Stones?: true
    Center_Inclusion?: true
    Black_Inclusion?: true
    Lab_Location?: true
    Brand?: true
    Sarine_Name?: true
    Internal_Clarity_Desc_Code?: true
    Clarity_Description?: true
    Modified_Rate?: true
    wire_discount_price?: true
    ImageLink?: true
    VideoLink?: true
    Video_HTML?: true
    CertificateLink?: true
    Rap_Price?: true
    Memo_Price?: true
    Memo_Discount_PER?: true
    Buy_Price?: true
    Buy_Price_Discount_PER?: true
    COD_Buy_Price?: true
    COD_Buy_Price_Discount_PER?: true
    Certificate?: true
  }

  export type DiamondCountAggregateInputType = {
    id?: true
    Stock_No?: true
    Availability?: true
    Shape?: true
    Weight?: true
    Color?: true
    Clarity?: true
    Cut_Grade?: true
    Polish?: true
    Symmetry?: true
    Fluorescence_Intensity?: true
    Fluorescence_Color?: true
    Measurements?: true
    Lab?: true
    Treatment?: true
    FancyColor?: true
    Fancy_Color_Intensity?: true
    FancyColorOvertone?: true
    DEPTH_PER?: true
    TABLE_PER?: true
    Girdle_Min?: true
    Girdle_Max?: true
    Girdle_Per?: true
    Girdle_Condition?: true
    Culet_Size?: true
    Culet_Condition?: true
    Crown_Height?: true
    Crown_Angle?: true
    Pavilion_Depth?: true
    Pavilion_Angle?: true
    Cert_Comments?: true
    Country?: true
    State?: true
    City?: true
    Country_Of_Origin?: true
    Key_To_Symbols?: true
    Shade?: true
    Star_Length?: true
    Report_Issue_Date?: true
    Report_Type?: true
    Milky?: true
    Eye_Clean?: true
    Gemprint_ID?: true
    BGM?: true
    Ratio?: true
    Diamond_Type?: true
    Member_Comments?: true
    Time_to_Location?: true
    LsMatchedPairSeparable?: true
    Pair_Stock?: true
    Allow_Raplink_Feed?: true
    Parcel_Stones?: true
    Center_Inclusion?: true
    Black_Inclusion?: true
    Lab_Location?: true
    Brand?: true
    Sarine_Name?: true
    Internal_Clarity_Desc_Code?: true
    Clarity_Description?: true
    Modified_Rate?: true
    wire_discount_price?: true
    ImageLink?: true
    VideoLink?: true
    Video_HTML?: true
    CertificateLink?: true
    Rap_Price?: true
    Memo_Price?: true
    Memo_Discount_PER?: true
    Buy_Price?: true
    Buy_Price_Discount_PER?: true
    COD_Buy_Price?: true
    COD_Buy_Price_Discount_PER?: true
    Certificate?: true
    _all?: true
  }

  export type DiamondAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Diamond to aggregate.
     */
    where?: DiamondWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Diamonds to fetch.
     */
    orderBy?: DiamondOrderByWithRelationInput | DiamondOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DiamondWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Diamonds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Diamonds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Diamonds
    **/
    _count?: true | DiamondCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DiamondAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DiamondSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DiamondMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DiamondMaxAggregateInputType
  }

  export type GetDiamondAggregateType<T extends DiamondAggregateArgs> = {
        [P in keyof T & keyof AggregateDiamond]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDiamond[P]>
      : GetScalarType<T[P], AggregateDiamond[P]>
  }




  export type DiamondGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DiamondWhereInput
    orderBy?: DiamondOrderByWithAggregationInput | DiamondOrderByWithAggregationInput[]
    by: DiamondScalarFieldEnum[] | DiamondScalarFieldEnum
    having?: DiamondScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DiamondCountAggregateInputType | true
    _avg?: DiamondAvgAggregateInputType
    _sum?: DiamondSumAggregateInputType
    _min?: DiamondMinAggregateInputType
    _max?: DiamondMaxAggregateInputType
  }

  export type DiamondGroupByOutputType = {
    id: number
    Stock_No: string
    Availability: string | null
    Shape: string | null
    Weight: number | null
    Color: string | null
    Clarity: string | null
    Cut_Grade: string | null
    Polish: string | null
    Symmetry: string | null
    Fluorescence_Intensity: string | null
    Fluorescence_Color: string | null
    Measurements: string | null
    Lab: string | null
    Treatment: string | null
    FancyColor: string | null
    Fancy_Color_Intensity: string | null
    FancyColorOvertone: string | null
    DEPTH_PER: number | null
    TABLE_PER: number | null
    Girdle_Min: number | null
    Girdle_Max: number | null
    Girdle_Per: number | null
    Girdle_Condition: string | null
    Culet_Size: string | null
    Culet_Condition: string | null
    Crown_Height: number | null
    Crown_Angle: number | null
    Pavilion_Depth: number | null
    Pavilion_Angle: number | null
    Cert_Comments: string | null
    Country: string | null
    State: string | null
    City: string | null
    Country_Of_Origin: string | null
    Key_To_Symbols: string | null
    Shade: string | null
    Star_Length: string | null
    Report_Issue_Date: Date | null
    Report_Type: string | null
    Milky: string | null
    Eye_Clean: string | null
    Gemprint_ID: string | null
    BGM: string | null
    Ratio: number | null
    Diamond_Type: string | null
    Member_Comments: string | null
    Time_to_Location: string | null
    LsMatchedPairSeparable: string | null
    Pair_Stock: string | null
    Allow_Raplink_Feed: string | null
    Parcel_Stones: string | null
    Center_Inclusion: string | null
    Black_Inclusion: string | null
    Lab_Location: string | null
    Brand: string | null
    Sarine_Name: string | null
    Internal_Clarity_Desc_Code: string | null
    Clarity_Description: string | null
    Modified_Rate: number | null
    wire_discount_price: number | null
    ImageLink: string | null
    VideoLink: string | null
    Video_HTML: string | null
    CertificateLink: string | null
    Rap_Price: number | null
    Memo_Price: number | null
    Memo_Discount_PER: number | null
    Buy_Price: number | null
    Buy_Price_Discount_PER: number | null
    COD_Buy_Price: number | null
    COD_Buy_Price_Discount_PER: number | null
    Certificate: string | null
    _count: DiamondCountAggregateOutputType | null
    _avg: DiamondAvgAggregateOutputType | null
    _sum: DiamondSumAggregateOutputType | null
    _min: DiamondMinAggregateOutputType | null
    _max: DiamondMaxAggregateOutputType | null
  }

  type GetDiamondGroupByPayload<T extends DiamondGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DiamondGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DiamondGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DiamondGroupByOutputType[P]>
            : GetScalarType<T[P], DiamondGroupByOutputType[P]>
        }
      >
    >


  export type DiamondSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    Stock_No?: boolean
    Availability?: boolean
    Shape?: boolean
    Weight?: boolean
    Color?: boolean
    Clarity?: boolean
    Cut_Grade?: boolean
    Polish?: boolean
    Symmetry?: boolean
    Fluorescence_Intensity?: boolean
    Fluorescence_Color?: boolean
    Measurements?: boolean
    Lab?: boolean
    Treatment?: boolean
    FancyColor?: boolean
    Fancy_Color_Intensity?: boolean
    FancyColorOvertone?: boolean
    DEPTH_PER?: boolean
    TABLE_PER?: boolean
    Girdle_Min?: boolean
    Girdle_Max?: boolean
    Girdle_Per?: boolean
    Girdle_Condition?: boolean
    Culet_Size?: boolean
    Culet_Condition?: boolean
    Crown_Height?: boolean
    Crown_Angle?: boolean
    Pavilion_Depth?: boolean
    Pavilion_Angle?: boolean
    Cert_Comments?: boolean
    Country?: boolean
    State?: boolean
    City?: boolean
    Country_Of_Origin?: boolean
    Key_To_Symbols?: boolean
    Shade?: boolean
    Star_Length?: boolean
    Report_Issue_Date?: boolean
    Report_Type?: boolean
    Milky?: boolean
    Eye_Clean?: boolean
    Gemprint_ID?: boolean
    BGM?: boolean
    Ratio?: boolean
    Diamond_Type?: boolean
    Member_Comments?: boolean
    Time_to_Location?: boolean
    LsMatchedPairSeparable?: boolean
    Pair_Stock?: boolean
    Allow_Raplink_Feed?: boolean
    Parcel_Stones?: boolean
    Center_Inclusion?: boolean
    Black_Inclusion?: boolean
    Lab_Location?: boolean
    Brand?: boolean
    Sarine_Name?: boolean
    Internal_Clarity_Desc_Code?: boolean
    Clarity_Description?: boolean
    Modified_Rate?: boolean
    wire_discount_price?: boolean
    ImageLink?: boolean
    VideoLink?: boolean
    Video_HTML?: boolean
    CertificateLink?: boolean
    Rap_Price?: boolean
    Memo_Price?: boolean
    Memo_Discount_PER?: boolean
    Buy_Price?: boolean
    Buy_Price_Discount_PER?: boolean
    COD_Buy_Price?: boolean
    COD_Buy_Price_Discount_PER?: boolean
    Certificate?: boolean
  }, ExtArgs["result"]["diamond"]>


  export type DiamondSelectScalar = {
    id?: boolean
    Stock_No?: boolean
    Availability?: boolean
    Shape?: boolean
    Weight?: boolean
    Color?: boolean
    Clarity?: boolean
    Cut_Grade?: boolean
    Polish?: boolean
    Symmetry?: boolean
    Fluorescence_Intensity?: boolean
    Fluorescence_Color?: boolean
    Measurements?: boolean
    Lab?: boolean
    Treatment?: boolean
    FancyColor?: boolean
    Fancy_Color_Intensity?: boolean
    FancyColorOvertone?: boolean
    DEPTH_PER?: boolean
    TABLE_PER?: boolean
    Girdle_Min?: boolean
    Girdle_Max?: boolean
    Girdle_Per?: boolean
    Girdle_Condition?: boolean
    Culet_Size?: boolean
    Culet_Condition?: boolean
    Crown_Height?: boolean
    Crown_Angle?: boolean
    Pavilion_Depth?: boolean
    Pavilion_Angle?: boolean
    Cert_Comments?: boolean
    Country?: boolean
    State?: boolean
    City?: boolean
    Country_Of_Origin?: boolean
    Key_To_Symbols?: boolean
    Shade?: boolean
    Star_Length?: boolean
    Report_Issue_Date?: boolean
    Report_Type?: boolean
    Milky?: boolean
    Eye_Clean?: boolean
    Gemprint_ID?: boolean
    BGM?: boolean
    Ratio?: boolean
    Diamond_Type?: boolean
    Member_Comments?: boolean
    Time_to_Location?: boolean
    LsMatchedPairSeparable?: boolean
    Pair_Stock?: boolean
    Allow_Raplink_Feed?: boolean
    Parcel_Stones?: boolean
    Center_Inclusion?: boolean
    Black_Inclusion?: boolean
    Lab_Location?: boolean
    Brand?: boolean
    Sarine_Name?: boolean
    Internal_Clarity_Desc_Code?: boolean
    Clarity_Description?: boolean
    Modified_Rate?: boolean
    wire_discount_price?: boolean
    ImageLink?: boolean
    VideoLink?: boolean
    Video_HTML?: boolean
    CertificateLink?: boolean
    Rap_Price?: boolean
    Memo_Price?: boolean
    Memo_Discount_PER?: boolean
    Buy_Price?: boolean
    Buy_Price_Discount_PER?: boolean
    COD_Buy_Price?: boolean
    COD_Buy_Price_Discount_PER?: boolean
    Certificate?: boolean
  }


  export type $DiamondPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Diamond"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      Stock_No: string
      Availability: string | null
      Shape: string | null
      Weight: number | null
      Color: string | null
      Clarity: string | null
      Cut_Grade: string | null
      Polish: string | null
      Symmetry: string | null
      Fluorescence_Intensity: string | null
      Fluorescence_Color: string | null
      Measurements: string | null
      Lab: string | null
      Treatment: string | null
      FancyColor: string | null
      Fancy_Color_Intensity: string | null
      FancyColorOvertone: string | null
      DEPTH_PER: number | null
      TABLE_PER: number | null
      Girdle_Min: number | null
      Girdle_Max: number | null
      Girdle_Per: number | null
      Girdle_Condition: string | null
      Culet_Size: string | null
      Culet_Condition: string | null
      Crown_Height: number | null
      Crown_Angle: number | null
      Pavilion_Depth: number | null
      Pavilion_Angle: number | null
      Cert_Comments: string | null
      Country: string | null
      State: string | null
      City: string | null
      Country_Of_Origin: string | null
      Key_To_Symbols: string | null
      Shade: string | null
      Star_Length: string | null
      Report_Issue_Date: Date | null
      Report_Type: string | null
      Milky: string | null
      Eye_Clean: string | null
      Gemprint_ID: string | null
      BGM: string | null
      Ratio: number | null
      Diamond_Type: string | null
      Member_Comments: string | null
      Time_to_Location: string | null
      LsMatchedPairSeparable: string | null
      Pair_Stock: string | null
      Allow_Raplink_Feed: string | null
      Parcel_Stones: string | null
      Center_Inclusion: string | null
      Black_Inclusion: string | null
      Lab_Location: string | null
      Brand: string | null
      Sarine_Name: string | null
      Internal_Clarity_Desc_Code: string | null
      Clarity_Description: string | null
      Modified_Rate: number | null
      wire_discount_price: number | null
      ImageLink: string | null
      VideoLink: string | null
      Video_HTML: string | null
      CertificateLink: string | null
      Rap_Price: number | null
      Memo_Price: number | null
      Memo_Discount_PER: number | null
      Buy_Price: number | null
      Buy_Price_Discount_PER: number | null
      COD_Buy_Price: number | null
      COD_Buy_Price_Discount_PER: number | null
      Certificate: string | null
    }, ExtArgs["result"]["diamond"]>
    composites: {}
  }

  type DiamondGetPayload<S extends boolean | null | undefined | DiamondDefaultArgs> = $Result.GetResult<Prisma.$DiamondPayload, S>

  type DiamondCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DiamondFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DiamondCountAggregateInputType | true
    }

  export interface DiamondDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Diamond'], meta: { name: 'Diamond' } }
    /**
     * Find zero or one Diamond that matches the filter.
     * @param {DiamondFindUniqueArgs} args - Arguments to find a Diamond
     * @example
     * // Get one Diamond
     * const diamond = await prisma.diamond.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DiamondFindUniqueArgs>(args: SelectSubset<T, DiamondFindUniqueArgs<ExtArgs>>): Prisma__DiamondClient<$Result.GetResult<Prisma.$DiamondPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Diamond that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DiamondFindUniqueOrThrowArgs} args - Arguments to find a Diamond
     * @example
     * // Get one Diamond
     * const diamond = await prisma.diamond.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DiamondFindUniqueOrThrowArgs>(args: SelectSubset<T, DiamondFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DiamondClient<$Result.GetResult<Prisma.$DiamondPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Diamond that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiamondFindFirstArgs} args - Arguments to find a Diamond
     * @example
     * // Get one Diamond
     * const diamond = await prisma.diamond.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DiamondFindFirstArgs>(args?: SelectSubset<T, DiamondFindFirstArgs<ExtArgs>>): Prisma__DiamondClient<$Result.GetResult<Prisma.$DiamondPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Diamond that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiamondFindFirstOrThrowArgs} args - Arguments to find a Diamond
     * @example
     * // Get one Diamond
     * const diamond = await prisma.diamond.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DiamondFindFirstOrThrowArgs>(args?: SelectSubset<T, DiamondFindFirstOrThrowArgs<ExtArgs>>): Prisma__DiamondClient<$Result.GetResult<Prisma.$DiamondPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Diamonds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiamondFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Diamonds
     * const diamonds = await prisma.diamond.findMany()
     * 
     * // Get first 10 Diamonds
     * const diamonds = await prisma.diamond.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const diamondWithIdOnly = await prisma.diamond.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DiamondFindManyArgs>(args?: SelectSubset<T, DiamondFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DiamondPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Diamond.
     * @param {DiamondCreateArgs} args - Arguments to create a Diamond.
     * @example
     * // Create one Diamond
     * const Diamond = await prisma.diamond.create({
     *   data: {
     *     // ... data to create a Diamond
     *   }
     * })
     * 
     */
    create<T extends DiamondCreateArgs>(args: SelectSubset<T, DiamondCreateArgs<ExtArgs>>): Prisma__DiamondClient<$Result.GetResult<Prisma.$DiamondPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Diamonds.
     * @param {DiamondCreateManyArgs} args - Arguments to create many Diamonds.
     * @example
     * // Create many Diamonds
     * const diamond = await prisma.diamond.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DiamondCreateManyArgs>(args?: SelectSubset<T, DiamondCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Diamond.
     * @param {DiamondDeleteArgs} args - Arguments to delete one Diamond.
     * @example
     * // Delete one Diamond
     * const Diamond = await prisma.diamond.delete({
     *   where: {
     *     // ... filter to delete one Diamond
     *   }
     * })
     * 
     */
    delete<T extends DiamondDeleteArgs>(args: SelectSubset<T, DiamondDeleteArgs<ExtArgs>>): Prisma__DiamondClient<$Result.GetResult<Prisma.$DiamondPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Diamond.
     * @param {DiamondUpdateArgs} args - Arguments to update one Diamond.
     * @example
     * // Update one Diamond
     * const diamond = await prisma.diamond.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DiamondUpdateArgs>(args: SelectSubset<T, DiamondUpdateArgs<ExtArgs>>): Prisma__DiamondClient<$Result.GetResult<Prisma.$DiamondPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Diamonds.
     * @param {DiamondDeleteManyArgs} args - Arguments to filter Diamonds to delete.
     * @example
     * // Delete a few Diamonds
     * const { count } = await prisma.diamond.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DiamondDeleteManyArgs>(args?: SelectSubset<T, DiamondDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Diamonds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiamondUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Diamonds
     * const diamond = await prisma.diamond.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DiamondUpdateManyArgs>(args: SelectSubset<T, DiamondUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Diamond.
     * @param {DiamondUpsertArgs} args - Arguments to update or create a Diamond.
     * @example
     * // Update or create a Diamond
     * const diamond = await prisma.diamond.upsert({
     *   create: {
     *     // ... data to create a Diamond
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Diamond we want to update
     *   }
     * })
     */
    upsert<T extends DiamondUpsertArgs>(args: SelectSubset<T, DiamondUpsertArgs<ExtArgs>>): Prisma__DiamondClient<$Result.GetResult<Prisma.$DiamondPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Diamonds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiamondCountArgs} args - Arguments to filter Diamonds to count.
     * @example
     * // Count the number of Diamonds
     * const count = await prisma.diamond.count({
     *   where: {
     *     // ... the filter for the Diamonds we want to count
     *   }
     * })
    **/
    count<T extends DiamondCountArgs>(
      args?: Subset<T, DiamondCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DiamondCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Diamond.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiamondAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DiamondAggregateArgs>(args: Subset<T, DiamondAggregateArgs>): Prisma.PrismaPromise<GetDiamondAggregateType<T>>

    /**
     * Group by Diamond.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiamondGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DiamondGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DiamondGroupByArgs['orderBy'] }
        : { orderBy?: DiamondGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DiamondGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDiamondGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Diamond model
   */
  readonly fields: DiamondFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Diamond.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DiamondClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Diamond model
   */ 
  interface DiamondFieldRefs {
    readonly id: FieldRef<"Diamond", 'Int'>
    readonly Stock_No: FieldRef<"Diamond", 'String'>
    readonly Availability: FieldRef<"Diamond", 'String'>
    readonly Shape: FieldRef<"Diamond", 'String'>
    readonly Weight: FieldRef<"Diamond", 'Float'>
    readonly Color: FieldRef<"Diamond", 'String'>
    readonly Clarity: FieldRef<"Diamond", 'String'>
    readonly Cut_Grade: FieldRef<"Diamond", 'String'>
    readonly Polish: FieldRef<"Diamond", 'String'>
    readonly Symmetry: FieldRef<"Diamond", 'String'>
    readonly Fluorescence_Intensity: FieldRef<"Diamond", 'String'>
    readonly Fluorescence_Color: FieldRef<"Diamond", 'String'>
    readonly Measurements: FieldRef<"Diamond", 'String'>
    readonly Lab: FieldRef<"Diamond", 'String'>
    readonly Treatment: FieldRef<"Diamond", 'String'>
    readonly FancyColor: FieldRef<"Diamond", 'String'>
    readonly Fancy_Color_Intensity: FieldRef<"Diamond", 'String'>
    readonly FancyColorOvertone: FieldRef<"Diamond", 'String'>
    readonly DEPTH_PER: FieldRef<"Diamond", 'Float'>
    readonly TABLE_PER: FieldRef<"Diamond", 'Float'>
    readonly Girdle_Min: FieldRef<"Diamond", 'Float'>
    readonly Girdle_Max: FieldRef<"Diamond", 'Float'>
    readonly Girdle_Per: FieldRef<"Diamond", 'Float'>
    readonly Girdle_Condition: FieldRef<"Diamond", 'String'>
    readonly Culet_Size: FieldRef<"Diamond", 'String'>
    readonly Culet_Condition: FieldRef<"Diamond", 'String'>
    readonly Crown_Height: FieldRef<"Diamond", 'Float'>
    readonly Crown_Angle: FieldRef<"Diamond", 'Float'>
    readonly Pavilion_Depth: FieldRef<"Diamond", 'Float'>
    readonly Pavilion_Angle: FieldRef<"Diamond", 'Float'>
    readonly Cert_Comments: FieldRef<"Diamond", 'String'>
    readonly Country: FieldRef<"Diamond", 'String'>
    readonly State: FieldRef<"Diamond", 'String'>
    readonly City: FieldRef<"Diamond", 'String'>
    readonly Country_Of_Origin: FieldRef<"Diamond", 'String'>
    readonly Key_To_Symbols: FieldRef<"Diamond", 'String'>
    readonly Shade: FieldRef<"Diamond", 'String'>
    readonly Star_Length: FieldRef<"Diamond", 'String'>
    readonly Report_Issue_Date: FieldRef<"Diamond", 'DateTime'>
    readonly Report_Type: FieldRef<"Diamond", 'String'>
    readonly Milky: FieldRef<"Diamond", 'String'>
    readonly Eye_Clean: FieldRef<"Diamond", 'String'>
    readonly Gemprint_ID: FieldRef<"Diamond", 'String'>
    readonly BGM: FieldRef<"Diamond", 'String'>
    readonly Ratio: FieldRef<"Diamond", 'Float'>
    readonly Diamond_Type: FieldRef<"Diamond", 'String'>
    readonly Member_Comments: FieldRef<"Diamond", 'String'>
    readonly Time_to_Location: FieldRef<"Diamond", 'String'>
    readonly LsMatchedPairSeparable: FieldRef<"Diamond", 'String'>
    readonly Pair_Stock: FieldRef<"Diamond", 'String'>
    readonly Allow_Raplink_Feed: FieldRef<"Diamond", 'String'>
    readonly Parcel_Stones: FieldRef<"Diamond", 'String'>
    readonly Center_Inclusion: FieldRef<"Diamond", 'String'>
    readonly Black_Inclusion: FieldRef<"Diamond", 'String'>
    readonly Lab_Location: FieldRef<"Diamond", 'String'>
    readonly Brand: FieldRef<"Diamond", 'String'>
    readonly Sarine_Name: FieldRef<"Diamond", 'String'>
    readonly Internal_Clarity_Desc_Code: FieldRef<"Diamond", 'String'>
    readonly Clarity_Description: FieldRef<"Diamond", 'String'>
    readonly Modified_Rate: FieldRef<"Diamond", 'Float'>
    readonly wire_discount_price: FieldRef<"Diamond", 'Float'>
    readonly ImageLink: FieldRef<"Diamond", 'String'>
    readonly VideoLink: FieldRef<"Diamond", 'String'>
    readonly Video_HTML: FieldRef<"Diamond", 'String'>
    readonly CertificateLink: FieldRef<"Diamond", 'String'>
    readonly Rap_Price: FieldRef<"Diamond", 'Float'>
    readonly Memo_Price: FieldRef<"Diamond", 'Float'>
    readonly Memo_Discount_PER: FieldRef<"Diamond", 'Float'>
    readonly Buy_Price: FieldRef<"Diamond", 'Float'>
    readonly Buy_Price_Discount_PER: FieldRef<"Diamond", 'Float'>
    readonly COD_Buy_Price: FieldRef<"Diamond", 'Float'>
    readonly COD_Buy_Price_Discount_PER: FieldRef<"Diamond", 'Float'>
    readonly Certificate: FieldRef<"Diamond", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Diamond findUnique
   */
  export type DiamondFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Diamond
     */
    select?: DiamondSelect<ExtArgs> | null
    /**
     * Filter, which Diamond to fetch.
     */
    where: DiamondWhereUniqueInput
  }

  /**
   * Diamond findUniqueOrThrow
   */
  export type DiamondFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Diamond
     */
    select?: DiamondSelect<ExtArgs> | null
    /**
     * Filter, which Diamond to fetch.
     */
    where: DiamondWhereUniqueInput
  }

  /**
   * Diamond findFirst
   */
  export type DiamondFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Diamond
     */
    select?: DiamondSelect<ExtArgs> | null
    /**
     * Filter, which Diamond to fetch.
     */
    where?: DiamondWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Diamonds to fetch.
     */
    orderBy?: DiamondOrderByWithRelationInput | DiamondOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Diamonds.
     */
    cursor?: DiamondWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Diamonds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Diamonds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Diamonds.
     */
    distinct?: DiamondScalarFieldEnum | DiamondScalarFieldEnum[]
  }

  /**
   * Diamond findFirstOrThrow
   */
  export type DiamondFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Diamond
     */
    select?: DiamondSelect<ExtArgs> | null
    /**
     * Filter, which Diamond to fetch.
     */
    where?: DiamondWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Diamonds to fetch.
     */
    orderBy?: DiamondOrderByWithRelationInput | DiamondOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Diamonds.
     */
    cursor?: DiamondWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Diamonds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Diamonds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Diamonds.
     */
    distinct?: DiamondScalarFieldEnum | DiamondScalarFieldEnum[]
  }

  /**
   * Diamond findMany
   */
  export type DiamondFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Diamond
     */
    select?: DiamondSelect<ExtArgs> | null
    /**
     * Filter, which Diamonds to fetch.
     */
    where?: DiamondWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Diamonds to fetch.
     */
    orderBy?: DiamondOrderByWithRelationInput | DiamondOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Diamonds.
     */
    cursor?: DiamondWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Diamonds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Diamonds.
     */
    skip?: number
    distinct?: DiamondScalarFieldEnum | DiamondScalarFieldEnum[]
  }

  /**
   * Diamond create
   */
  export type DiamondCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Diamond
     */
    select?: DiamondSelect<ExtArgs> | null
    /**
     * The data needed to create a Diamond.
     */
    data: XOR<DiamondCreateInput, DiamondUncheckedCreateInput>
  }

  /**
   * Diamond createMany
   */
  export type DiamondCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Diamonds.
     */
    data: DiamondCreateManyInput | DiamondCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Diamond update
   */
  export type DiamondUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Diamond
     */
    select?: DiamondSelect<ExtArgs> | null
    /**
     * The data needed to update a Diamond.
     */
    data: XOR<DiamondUpdateInput, DiamondUncheckedUpdateInput>
    /**
     * Choose, which Diamond to update.
     */
    where: DiamondWhereUniqueInput
  }

  /**
   * Diamond updateMany
   */
  export type DiamondUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Diamonds.
     */
    data: XOR<DiamondUpdateManyMutationInput, DiamondUncheckedUpdateManyInput>
    /**
     * Filter which Diamonds to update
     */
    where?: DiamondWhereInput
  }

  /**
   * Diamond upsert
   */
  export type DiamondUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Diamond
     */
    select?: DiamondSelect<ExtArgs> | null
    /**
     * The filter to search for the Diamond to update in case it exists.
     */
    where: DiamondWhereUniqueInput
    /**
     * In case the Diamond found by the `where` argument doesn't exist, create a new Diamond with this data.
     */
    create: XOR<DiamondCreateInput, DiamondUncheckedCreateInput>
    /**
     * In case the Diamond was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DiamondUpdateInput, DiamondUncheckedUpdateInput>
  }

  /**
   * Diamond delete
   */
  export type DiamondDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Diamond
     */
    select?: DiamondSelect<ExtArgs> | null
    /**
     * Filter which Diamond to delete.
     */
    where: DiamondWhereUniqueInput
  }

  /**
   * Diamond deleteMany
   */
  export type DiamondDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Diamonds to delete
     */
    where?: DiamondWhereInput
  }

  /**
   * Diamond without action
   */
  export type DiamondDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Diamond
     */
    select?: DiamondSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const SessionScalarFieldEnum: {
    id: 'id',
    shop: 'shop',
    state: 'state',
    isOnline: 'isOnline',
    scope: 'scope',
    expires: 'expires',
    accessToken: 'accessToken',
    userId: 'userId',
    firstName: 'firstName',
    lastName: 'lastName',
    email: 'email',
    accountOwner: 'accountOwner',
    locale: 'locale',
    collaborator: 'collaborator',
    emailVerified: 'emailVerified'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const ProductScalarFieldEnum: {
    id: 'id',
    title: 'title',
    price: 'price',
    description: 'description',
    category: 'category',
    image: 'image',
    ratingId: 'ratingId'
  };

  export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


  export const RatingScalarFieldEnum: {
    id: 'id',
    rate: 'rate',
    count: 'count',
    productId: 'productId'
  };

  export type RatingScalarFieldEnum = (typeof RatingScalarFieldEnum)[keyof typeof RatingScalarFieldEnum]


  export const DiamondScalarFieldEnum: {
    id: 'id',
    Stock_No: 'Stock_No',
    Availability: 'Availability',
    Shape: 'Shape',
    Weight: 'Weight',
    Color: 'Color',
    Clarity: 'Clarity',
    Cut_Grade: 'Cut_Grade',
    Polish: 'Polish',
    Symmetry: 'Symmetry',
    Fluorescence_Intensity: 'Fluorescence_Intensity',
    Fluorescence_Color: 'Fluorescence_Color',
    Measurements: 'Measurements',
    Lab: 'Lab',
    Treatment: 'Treatment',
    FancyColor: 'FancyColor',
    Fancy_Color_Intensity: 'Fancy_Color_Intensity',
    FancyColorOvertone: 'FancyColorOvertone',
    DEPTH_PER: 'DEPTH_PER',
    TABLE_PER: 'TABLE_PER',
    Girdle_Min: 'Girdle_Min',
    Girdle_Max: 'Girdle_Max',
    Girdle_Per: 'Girdle_Per',
    Girdle_Condition: 'Girdle_Condition',
    Culet_Size: 'Culet_Size',
    Culet_Condition: 'Culet_Condition',
    Crown_Height: 'Crown_Height',
    Crown_Angle: 'Crown_Angle',
    Pavilion_Depth: 'Pavilion_Depth',
    Pavilion_Angle: 'Pavilion_Angle',
    Cert_Comments: 'Cert_Comments',
    Country: 'Country',
    State: 'State',
    City: 'City',
    Country_Of_Origin: 'Country_Of_Origin',
    Key_To_Symbols: 'Key_To_Symbols',
    Shade: 'Shade',
    Star_Length: 'Star_Length',
    Report_Issue_Date: 'Report_Issue_Date',
    Report_Type: 'Report_Type',
    Milky: 'Milky',
    Eye_Clean: 'Eye_Clean',
    Gemprint_ID: 'Gemprint_ID',
    BGM: 'BGM',
    Ratio: 'Ratio',
    Diamond_Type: 'Diamond_Type',
    Member_Comments: 'Member_Comments',
    Time_to_Location: 'Time_to_Location',
    LsMatchedPairSeparable: 'LsMatchedPairSeparable',
    Pair_Stock: 'Pair_Stock',
    Allow_Raplink_Feed: 'Allow_Raplink_Feed',
    Parcel_Stones: 'Parcel_Stones',
    Center_Inclusion: 'Center_Inclusion',
    Black_Inclusion: 'Black_Inclusion',
    Lab_Location: 'Lab_Location',
    Brand: 'Brand',
    Sarine_Name: 'Sarine_Name',
    Internal_Clarity_Desc_Code: 'Internal_Clarity_Desc_Code',
    Clarity_Description: 'Clarity_Description',
    Modified_Rate: 'Modified_Rate',
    wire_discount_price: 'wire_discount_price',
    ImageLink: 'ImageLink',
    VideoLink: 'VideoLink',
    Video_HTML: 'Video_HTML',
    CertificateLink: 'CertificateLink',
    Rap_Price: 'Rap_Price',
    Memo_Price: 'Memo_Price',
    Memo_Discount_PER: 'Memo_Discount_PER',
    Buy_Price: 'Buy_Price',
    Buy_Price_Discount_PER: 'Buy_Price_Discount_PER',
    COD_Buy_Price: 'COD_Buy_Price',
    COD_Buy_Price_Discount_PER: 'COD_Buy_Price_Discount_PER',
    Certificate: 'Certificate'
  };

  export type DiamondScalarFieldEnum = (typeof DiamondScalarFieldEnum)[keyof typeof DiamondScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'BigInt'
   */
  export type BigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: StringFilter<"Session"> | string
    shop?: StringFilter<"Session"> | string
    state?: StringFilter<"Session"> | string
    isOnline?: BoolFilter<"Session"> | boolean
    scope?: StringNullableFilter<"Session"> | string | null
    expires?: DateTimeNullableFilter<"Session"> | Date | string | null
    accessToken?: StringFilter<"Session"> | string
    userId?: BigIntNullableFilter<"Session"> | bigint | number | null
    firstName?: StringNullableFilter<"Session"> | string | null
    lastName?: StringNullableFilter<"Session"> | string | null
    email?: StringNullableFilter<"Session"> | string | null
    accountOwner?: BoolFilter<"Session"> | boolean
    locale?: StringNullableFilter<"Session"> | string | null
    collaborator?: BoolNullableFilter<"Session"> | boolean | null
    emailVerified?: BoolNullableFilter<"Session"> | boolean | null
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    shop?: SortOrder
    state?: SortOrder
    isOnline?: SortOrder
    scope?: SortOrderInput | SortOrder
    expires?: SortOrderInput | SortOrder
    accessToken?: SortOrder
    userId?: SortOrderInput | SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    accountOwner?: SortOrder
    locale?: SortOrderInput | SortOrder
    collaborator?: SortOrderInput | SortOrder
    emailVerified?: SortOrderInput | SortOrder
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    shop?: StringFilter<"Session"> | string
    state?: StringFilter<"Session"> | string
    isOnline?: BoolFilter<"Session"> | boolean
    scope?: StringNullableFilter<"Session"> | string | null
    expires?: DateTimeNullableFilter<"Session"> | Date | string | null
    accessToken?: StringFilter<"Session"> | string
    userId?: BigIntNullableFilter<"Session"> | bigint | number | null
    firstName?: StringNullableFilter<"Session"> | string | null
    lastName?: StringNullableFilter<"Session"> | string | null
    email?: StringNullableFilter<"Session"> | string | null
    accountOwner?: BoolFilter<"Session"> | boolean
    locale?: StringNullableFilter<"Session"> | string | null
    collaborator?: BoolNullableFilter<"Session"> | boolean | null
    emailVerified?: BoolNullableFilter<"Session"> | boolean | null
  }, "id">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    shop?: SortOrder
    state?: SortOrder
    isOnline?: SortOrder
    scope?: SortOrderInput | SortOrder
    expires?: SortOrderInput | SortOrder
    accessToken?: SortOrder
    userId?: SortOrderInput | SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    accountOwner?: SortOrder
    locale?: SortOrderInput | SortOrder
    collaborator?: SortOrderInput | SortOrder
    emailVerified?: SortOrderInput | SortOrder
    _count?: SessionCountOrderByAggregateInput
    _avg?: SessionAvgOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
    _sum?: SessionSumOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Session"> | string
    shop?: StringWithAggregatesFilter<"Session"> | string
    state?: StringWithAggregatesFilter<"Session"> | string
    isOnline?: BoolWithAggregatesFilter<"Session"> | boolean
    scope?: StringNullableWithAggregatesFilter<"Session"> | string | null
    expires?: DateTimeNullableWithAggregatesFilter<"Session"> | Date | string | null
    accessToken?: StringWithAggregatesFilter<"Session"> | string
    userId?: BigIntNullableWithAggregatesFilter<"Session"> | bigint | number | null
    firstName?: StringNullableWithAggregatesFilter<"Session"> | string | null
    lastName?: StringNullableWithAggregatesFilter<"Session"> | string | null
    email?: StringNullableWithAggregatesFilter<"Session"> | string | null
    accountOwner?: BoolWithAggregatesFilter<"Session"> | boolean
    locale?: StringNullableWithAggregatesFilter<"Session"> | string | null
    collaborator?: BoolNullableWithAggregatesFilter<"Session"> | boolean | null
    emailVerified?: BoolNullableWithAggregatesFilter<"Session"> | boolean | null
  }

  export type ProductWhereInput = {
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    id?: IntFilter<"Product"> | number
    title?: StringFilter<"Product"> | string
    price?: FloatFilter<"Product"> | number
    description?: StringFilter<"Product"> | string
    category?: StringFilter<"Product"> | string
    image?: StringFilter<"Product"> | string
    ratingId?: IntNullableFilter<"Product"> | number | null
    rating?: XOR<RatingNullableRelationFilter, RatingWhereInput> | null
  }

  export type ProductOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    price?: SortOrder
    description?: SortOrder
    category?: SortOrder
    image?: SortOrder
    ratingId?: SortOrderInput | SortOrder
    rating?: RatingOrderByWithRelationInput
  }

  export type ProductWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    ratingId?: number
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    title?: StringFilter<"Product"> | string
    price?: FloatFilter<"Product"> | number
    description?: StringFilter<"Product"> | string
    category?: StringFilter<"Product"> | string
    image?: StringFilter<"Product"> | string
    rating?: XOR<RatingNullableRelationFilter, RatingWhereInput> | null
  }, "id" | "ratingId">

  export type ProductOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    price?: SortOrder
    description?: SortOrder
    category?: SortOrder
    image?: SortOrder
    ratingId?: SortOrderInput | SortOrder
    _count?: ProductCountOrderByAggregateInput
    _avg?: ProductAvgOrderByAggregateInput
    _max?: ProductMaxOrderByAggregateInput
    _min?: ProductMinOrderByAggregateInput
    _sum?: ProductSumOrderByAggregateInput
  }

  export type ProductScalarWhereWithAggregatesInput = {
    AND?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    OR?: ProductScalarWhereWithAggregatesInput[]
    NOT?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Product"> | number
    title?: StringWithAggregatesFilter<"Product"> | string
    price?: FloatWithAggregatesFilter<"Product"> | number
    description?: StringWithAggregatesFilter<"Product"> | string
    category?: StringWithAggregatesFilter<"Product"> | string
    image?: StringWithAggregatesFilter<"Product"> | string
    ratingId?: IntNullableWithAggregatesFilter<"Product"> | number | null
  }

  export type RatingWhereInput = {
    AND?: RatingWhereInput | RatingWhereInput[]
    OR?: RatingWhereInput[]
    NOT?: RatingWhereInput | RatingWhereInput[]
    id?: IntFilter<"Rating"> | number
    rate?: FloatFilter<"Rating"> | number
    count?: IntFilter<"Rating"> | number
    productId?: IntNullableFilter<"Rating"> | number | null
    product?: XOR<ProductNullableRelationFilter, ProductWhereInput> | null
  }

  export type RatingOrderByWithRelationInput = {
    id?: SortOrder
    rate?: SortOrder
    count?: SortOrder
    productId?: SortOrderInput | SortOrder
    product?: ProductOrderByWithRelationInput
  }

  export type RatingWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    productId?: number
    AND?: RatingWhereInput | RatingWhereInput[]
    OR?: RatingWhereInput[]
    NOT?: RatingWhereInput | RatingWhereInput[]
    rate?: FloatFilter<"Rating"> | number
    count?: IntFilter<"Rating"> | number
    product?: XOR<ProductNullableRelationFilter, ProductWhereInput> | null
  }, "id" | "productId">

  export type RatingOrderByWithAggregationInput = {
    id?: SortOrder
    rate?: SortOrder
    count?: SortOrder
    productId?: SortOrderInput | SortOrder
    _count?: RatingCountOrderByAggregateInput
    _avg?: RatingAvgOrderByAggregateInput
    _max?: RatingMaxOrderByAggregateInput
    _min?: RatingMinOrderByAggregateInput
    _sum?: RatingSumOrderByAggregateInput
  }

  export type RatingScalarWhereWithAggregatesInput = {
    AND?: RatingScalarWhereWithAggregatesInput | RatingScalarWhereWithAggregatesInput[]
    OR?: RatingScalarWhereWithAggregatesInput[]
    NOT?: RatingScalarWhereWithAggregatesInput | RatingScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Rating"> | number
    rate?: FloatWithAggregatesFilter<"Rating"> | number
    count?: IntWithAggregatesFilter<"Rating"> | number
    productId?: IntNullableWithAggregatesFilter<"Rating"> | number | null
  }

  export type DiamondWhereInput = {
    AND?: DiamondWhereInput | DiamondWhereInput[]
    OR?: DiamondWhereInput[]
    NOT?: DiamondWhereInput | DiamondWhereInput[]
    id?: IntFilter<"Diamond"> | number
    Stock_No?: StringFilter<"Diamond"> | string
    Availability?: StringNullableFilter<"Diamond"> | string | null
    Shape?: StringNullableFilter<"Diamond"> | string | null
    Weight?: FloatNullableFilter<"Diamond"> | number | null
    Color?: StringNullableFilter<"Diamond"> | string | null
    Clarity?: StringNullableFilter<"Diamond"> | string | null
    Cut_Grade?: StringNullableFilter<"Diamond"> | string | null
    Polish?: StringNullableFilter<"Diamond"> | string | null
    Symmetry?: StringNullableFilter<"Diamond"> | string | null
    Fluorescence_Intensity?: StringNullableFilter<"Diamond"> | string | null
    Fluorescence_Color?: StringNullableFilter<"Diamond"> | string | null
    Measurements?: StringNullableFilter<"Diamond"> | string | null
    Lab?: StringNullableFilter<"Diamond"> | string | null
    Treatment?: StringNullableFilter<"Diamond"> | string | null
    FancyColor?: StringNullableFilter<"Diamond"> | string | null
    Fancy_Color_Intensity?: StringNullableFilter<"Diamond"> | string | null
    FancyColorOvertone?: StringNullableFilter<"Diamond"> | string | null
    DEPTH_PER?: FloatNullableFilter<"Diamond"> | number | null
    TABLE_PER?: FloatNullableFilter<"Diamond"> | number | null
    Girdle_Min?: FloatNullableFilter<"Diamond"> | number | null
    Girdle_Max?: FloatNullableFilter<"Diamond"> | number | null
    Girdle_Per?: FloatNullableFilter<"Diamond"> | number | null
    Girdle_Condition?: StringNullableFilter<"Diamond"> | string | null
    Culet_Size?: StringNullableFilter<"Diamond"> | string | null
    Culet_Condition?: StringNullableFilter<"Diamond"> | string | null
    Crown_Height?: FloatNullableFilter<"Diamond"> | number | null
    Crown_Angle?: FloatNullableFilter<"Diamond"> | number | null
    Pavilion_Depth?: FloatNullableFilter<"Diamond"> | number | null
    Pavilion_Angle?: FloatNullableFilter<"Diamond"> | number | null
    Cert_Comments?: StringNullableFilter<"Diamond"> | string | null
    Country?: StringNullableFilter<"Diamond"> | string | null
    State?: StringNullableFilter<"Diamond"> | string | null
    City?: StringNullableFilter<"Diamond"> | string | null
    Country_Of_Origin?: StringNullableFilter<"Diamond"> | string | null
    Key_To_Symbols?: StringNullableFilter<"Diamond"> | string | null
    Shade?: StringNullableFilter<"Diamond"> | string | null
    Star_Length?: StringNullableFilter<"Diamond"> | string | null
    Report_Issue_Date?: DateTimeNullableFilter<"Diamond"> | Date | string | null
    Report_Type?: StringNullableFilter<"Diamond"> | string | null
    Milky?: StringNullableFilter<"Diamond"> | string | null
    Eye_Clean?: StringNullableFilter<"Diamond"> | string | null
    Gemprint_ID?: StringNullableFilter<"Diamond"> | string | null
    BGM?: StringNullableFilter<"Diamond"> | string | null
    Ratio?: FloatNullableFilter<"Diamond"> | number | null
    Diamond_Type?: StringNullableFilter<"Diamond"> | string | null
    Member_Comments?: StringNullableFilter<"Diamond"> | string | null
    Time_to_Location?: StringNullableFilter<"Diamond"> | string | null
    LsMatchedPairSeparable?: StringNullableFilter<"Diamond"> | string | null
    Pair_Stock?: StringNullableFilter<"Diamond"> | string | null
    Allow_Raplink_Feed?: StringNullableFilter<"Diamond"> | string | null
    Parcel_Stones?: StringNullableFilter<"Diamond"> | string | null
    Center_Inclusion?: StringNullableFilter<"Diamond"> | string | null
    Black_Inclusion?: StringNullableFilter<"Diamond"> | string | null
    Lab_Location?: StringNullableFilter<"Diamond"> | string | null
    Brand?: StringNullableFilter<"Diamond"> | string | null
    Sarine_Name?: StringNullableFilter<"Diamond"> | string | null
    Internal_Clarity_Desc_Code?: StringNullableFilter<"Diamond"> | string | null
    Clarity_Description?: StringNullableFilter<"Diamond"> | string | null
    Modified_Rate?: FloatNullableFilter<"Diamond"> | number | null
    wire_discount_price?: FloatNullableFilter<"Diamond"> | number | null
    ImageLink?: StringNullableFilter<"Diamond"> | string | null
    VideoLink?: StringNullableFilter<"Diamond"> | string | null
    Video_HTML?: StringNullableFilter<"Diamond"> | string | null
    CertificateLink?: StringNullableFilter<"Diamond"> | string | null
    Rap_Price?: FloatNullableFilter<"Diamond"> | number | null
    Memo_Price?: FloatNullableFilter<"Diamond"> | number | null
    Memo_Discount_PER?: FloatNullableFilter<"Diamond"> | number | null
    Buy_Price?: FloatNullableFilter<"Diamond"> | number | null
    Buy_Price_Discount_PER?: FloatNullableFilter<"Diamond"> | number | null
    COD_Buy_Price?: FloatNullableFilter<"Diamond"> | number | null
    COD_Buy_Price_Discount_PER?: FloatNullableFilter<"Diamond"> | number | null
    Certificate?: StringNullableFilter<"Diamond"> | string | null
  }

  export type DiamondOrderByWithRelationInput = {
    id?: SortOrder
    Stock_No?: SortOrder
    Availability?: SortOrderInput | SortOrder
    Shape?: SortOrderInput | SortOrder
    Weight?: SortOrderInput | SortOrder
    Color?: SortOrderInput | SortOrder
    Clarity?: SortOrderInput | SortOrder
    Cut_Grade?: SortOrderInput | SortOrder
    Polish?: SortOrderInput | SortOrder
    Symmetry?: SortOrderInput | SortOrder
    Fluorescence_Intensity?: SortOrderInput | SortOrder
    Fluorescence_Color?: SortOrderInput | SortOrder
    Measurements?: SortOrderInput | SortOrder
    Lab?: SortOrderInput | SortOrder
    Treatment?: SortOrderInput | SortOrder
    FancyColor?: SortOrderInput | SortOrder
    Fancy_Color_Intensity?: SortOrderInput | SortOrder
    FancyColorOvertone?: SortOrderInput | SortOrder
    DEPTH_PER?: SortOrderInput | SortOrder
    TABLE_PER?: SortOrderInput | SortOrder
    Girdle_Min?: SortOrderInput | SortOrder
    Girdle_Max?: SortOrderInput | SortOrder
    Girdle_Per?: SortOrderInput | SortOrder
    Girdle_Condition?: SortOrderInput | SortOrder
    Culet_Size?: SortOrderInput | SortOrder
    Culet_Condition?: SortOrderInput | SortOrder
    Crown_Height?: SortOrderInput | SortOrder
    Crown_Angle?: SortOrderInput | SortOrder
    Pavilion_Depth?: SortOrderInput | SortOrder
    Pavilion_Angle?: SortOrderInput | SortOrder
    Cert_Comments?: SortOrderInput | SortOrder
    Country?: SortOrderInput | SortOrder
    State?: SortOrderInput | SortOrder
    City?: SortOrderInput | SortOrder
    Country_Of_Origin?: SortOrderInput | SortOrder
    Key_To_Symbols?: SortOrderInput | SortOrder
    Shade?: SortOrderInput | SortOrder
    Star_Length?: SortOrderInput | SortOrder
    Report_Issue_Date?: SortOrderInput | SortOrder
    Report_Type?: SortOrderInput | SortOrder
    Milky?: SortOrderInput | SortOrder
    Eye_Clean?: SortOrderInput | SortOrder
    Gemprint_ID?: SortOrderInput | SortOrder
    BGM?: SortOrderInput | SortOrder
    Ratio?: SortOrderInput | SortOrder
    Diamond_Type?: SortOrderInput | SortOrder
    Member_Comments?: SortOrderInput | SortOrder
    Time_to_Location?: SortOrderInput | SortOrder
    LsMatchedPairSeparable?: SortOrderInput | SortOrder
    Pair_Stock?: SortOrderInput | SortOrder
    Allow_Raplink_Feed?: SortOrderInput | SortOrder
    Parcel_Stones?: SortOrderInput | SortOrder
    Center_Inclusion?: SortOrderInput | SortOrder
    Black_Inclusion?: SortOrderInput | SortOrder
    Lab_Location?: SortOrderInput | SortOrder
    Brand?: SortOrderInput | SortOrder
    Sarine_Name?: SortOrderInput | SortOrder
    Internal_Clarity_Desc_Code?: SortOrderInput | SortOrder
    Clarity_Description?: SortOrderInput | SortOrder
    Modified_Rate?: SortOrderInput | SortOrder
    wire_discount_price?: SortOrderInput | SortOrder
    ImageLink?: SortOrderInput | SortOrder
    VideoLink?: SortOrderInput | SortOrder
    Video_HTML?: SortOrderInput | SortOrder
    CertificateLink?: SortOrderInput | SortOrder
    Rap_Price?: SortOrderInput | SortOrder
    Memo_Price?: SortOrderInput | SortOrder
    Memo_Discount_PER?: SortOrderInput | SortOrder
    Buy_Price?: SortOrderInput | SortOrder
    Buy_Price_Discount_PER?: SortOrderInput | SortOrder
    COD_Buy_Price?: SortOrderInput | SortOrder
    COD_Buy_Price_Discount_PER?: SortOrderInput | SortOrder
    Certificate?: SortOrderInput | SortOrder
  }

  export type DiamondWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DiamondWhereInput | DiamondWhereInput[]
    OR?: DiamondWhereInput[]
    NOT?: DiamondWhereInput | DiamondWhereInput[]
    Stock_No?: StringFilter<"Diamond"> | string
    Availability?: StringNullableFilter<"Diamond"> | string | null
    Shape?: StringNullableFilter<"Diamond"> | string | null
    Weight?: FloatNullableFilter<"Diamond"> | number | null
    Color?: StringNullableFilter<"Diamond"> | string | null
    Clarity?: StringNullableFilter<"Diamond"> | string | null
    Cut_Grade?: StringNullableFilter<"Diamond"> | string | null
    Polish?: StringNullableFilter<"Diamond"> | string | null
    Symmetry?: StringNullableFilter<"Diamond"> | string | null
    Fluorescence_Intensity?: StringNullableFilter<"Diamond"> | string | null
    Fluorescence_Color?: StringNullableFilter<"Diamond"> | string | null
    Measurements?: StringNullableFilter<"Diamond"> | string | null
    Lab?: StringNullableFilter<"Diamond"> | string | null
    Treatment?: StringNullableFilter<"Diamond"> | string | null
    FancyColor?: StringNullableFilter<"Diamond"> | string | null
    Fancy_Color_Intensity?: StringNullableFilter<"Diamond"> | string | null
    FancyColorOvertone?: StringNullableFilter<"Diamond"> | string | null
    DEPTH_PER?: FloatNullableFilter<"Diamond"> | number | null
    TABLE_PER?: FloatNullableFilter<"Diamond"> | number | null
    Girdle_Min?: FloatNullableFilter<"Diamond"> | number | null
    Girdle_Max?: FloatNullableFilter<"Diamond"> | number | null
    Girdle_Per?: FloatNullableFilter<"Diamond"> | number | null
    Girdle_Condition?: StringNullableFilter<"Diamond"> | string | null
    Culet_Size?: StringNullableFilter<"Diamond"> | string | null
    Culet_Condition?: StringNullableFilter<"Diamond"> | string | null
    Crown_Height?: FloatNullableFilter<"Diamond"> | number | null
    Crown_Angle?: FloatNullableFilter<"Diamond"> | number | null
    Pavilion_Depth?: FloatNullableFilter<"Diamond"> | number | null
    Pavilion_Angle?: FloatNullableFilter<"Diamond"> | number | null
    Cert_Comments?: StringNullableFilter<"Diamond"> | string | null
    Country?: StringNullableFilter<"Diamond"> | string | null
    State?: StringNullableFilter<"Diamond"> | string | null
    City?: StringNullableFilter<"Diamond"> | string | null
    Country_Of_Origin?: StringNullableFilter<"Diamond"> | string | null
    Key_To_Symbols?: StringNullableFilter<"Diamond"> | string | null
    Shade?: StringNullableFilter<"Diamond"> | string | null
    Star_Length?: StringNullableFilter<"Diamond"> | string | null
    Report_Issue_Date?: DateTimeNullableFilter<"Diamond"> | Date | string | null
    Report_Type?: StringNullableFilter<"Diamond"> | string | null
    Milky?: StringNullableFilter<"Diamond"> | string | null
    Eye_Clean?: StringNullableFilter<"Diamond"> | string | null
    Gemprint_ID?: StringNullableFilter<"Diamond"> | string | null
    BGM?: StringNullableFilter<"Diamond"> | string | null
    Ratio?: FloatNullableFilter<"Diamond"> | number | null
    Diamond_Type?: StringNullableFilter<"Diamond"> | string | null
    Member_Comments?: StringNullableFilter<"Diamond"> | string | null
    Time_to_Location?: StringNullableFilter<"Diamond"> | string | null
    LsMatchedPairSeparable?: StringNullableFilter<"Diamond"> | string | null
    Pair_Stock?: StringNullableFilter<"Diamond"> | string | null
    Allow_Raplink_Feed?: StringNullableFilter<"Diamond"> | string | null
    Parcel_Stones?: StringNullableFilter<"Diamond"> | string | null
    Center_Inclusion?: StringNullableFilter<"Diamond"> | string | null
    Black_Inclusion?: StringNullableFilter<"Diamond"> | string | null
    Lab_Location?: StringNullableFilter<"Diamond"> | string | null
    Brand?: StringNullableFilter<"Diamond"> | string | null
    Sarine_Name?: StringNullableFilter<"Diamond"> | string | null
    Internal_Clarity_Desc_Code?: StringNullableFilter<"Diamond"> | string | null
    Clarity_Description?: StringNullableFilter<"Diamond"> | string | null
    Modified_Rate?: FloatNullableFilter<"Diamond"> | number | null
    wire_discount_price?: FloatNullableFilter<"Diamond"> | number | null
    ImageLink?: StringNullableFilter<"Diamond"> | string | null
    VideoLink?: StringNullableFilter<"Diamond"> | string | null
    Video_HTML?: StringNullableFilter<"Diamond"> | string | null
    CertificateLink?: StringNullableFilter<"Diamond"> | string | null
    Rap_Price?: FloatNullableFilter<"Diamond"> | number | null
    Memo_Price?: FloatNullableFilter<"Diamond"> | number | null
    Memo_Discount_PER?: FloatNullableFilter<"Diamond"> | number | null
    Buy_Price?: FloatNullableFilter<"Diamond"> | number | null
    Buy_Price_Discount_PER?: FloatNullableFilter<"Diamond"> | number | null
    COD_Buy_Price?: FloatNullableFilter<"Diamond"> | number | null
    COD_Buy_Price_Discount_PER?: FloatNullableFilter<"Diamond"> | number | null
    Certificate?: StringNullableFilter<"Diamond"> | string | null
  }, "id">

  export type DiamondOrderByWithAggregationInput = {
    id?: SortOrder
    Stock_No?: SortOrder
    Availability?: SortOrderInput | SortOrder
    Shape?: SortOrderInput | SortOrder
    Weight?: SortOrderInput | SortOrder
    Color?: SortOrderInput | SortOrder
    Clarity?: SortOrderInput | SortOrder
    Cut_Grade?: SortOrderInput | SortOrder
    Polish?: SortOrderInput | SortOrder
    Symmetry?: SortOrderInput | SortOrder
    Fluorescence_Intensity?: SortOrderInput | SortOrder
    Fluorescence_Color?: SortOrderInput | SortOrder
    Measurements?: SortOrderInput | SortOrder
    Lab?: SortOrderInput | SortOrder
    Treatment?: SortOrderInput | SortOrder
    FancyColor?: SortOrderInput | SortOrder
    Fancy_Color_Intensity?: SortOrderInput | SortOrder
    FancyColorOvertone?: SortOrderInput | SortOrder
    DEPTH_PER?: SortOrderInput | SortOrder
    TABLE_PER?: SortOrderInput | SortOrder
    Girdle_Min?: SortOrderInput | SortOrder
    Girdle_Max?: SortOrderInput | SortOrder
    Girdle_Per?: SortOrderInput | SortOrder
    Girdle_Condition?: SortOrderInput | SortOrder
    Culet_Size?: SortOrderInput | SortOrder
    Culet_Condition?: SortOrderInput | SortOrder
    Crown_Height?: SortOrderInput | SortOrder
    Crown_Angle?: SortOrderInput | SortOrder
    Pavilion_Depth?: SortOrderInput | SortOrder
    Pavilion_Angle?: SortOrderInput | SortOrder
    Cert_Comments?: SortOrderInput | SortOrder
    Country?: SortOrderInput | SortOrder
    State?: SortOrderInput | SortOrder
    City?: SortOrderInput | SortOrder
    Country_Of_Origin?: SortOrderInput | SortOrder
    Key_To_Symbols?: SortOrderInput | SortOrder
    Shade?: SortOrderInput | SortOrder
    Star_Length?: SortOrderInput | SortOrder
    Report_Issue_Date?: SortOrderInput | SortOrder
    Report_Type?: SortOrderInput | SortOrder
    Milky?: SortOrderInput | SortOrder
    Eye_Clean?: SortOrderInput | SortOrder
    Gemprint_ID?: SortOrderInput | SortOrder
    BGM?: SortOrderInput | SortOrder
    Ratio?: SortOrderInput | SortOrder
    Diamond_Type?: SortOrderInput | SortOrder
    Member_Comments?: SortOrderInput | SortOrder
    Time_to_Location?: SortOrderInput | SortOrder
    LsMatchedPairSeparable?: SortOrderInput | SortOrder
    Pair_Stock?: SortOrderInput | SortOrder
    Allow_Raplink_Feed?: SortOrderInput | SortOrder
    Parcel_Stones?: SortOrderInput | SortOrder
    Center_Inclusion?: SortOrderInput | SortOrder
    Black_Inclusion?: SortOrderInput | SortOrder
    Lab_Location?: SortOrderInput | SortOrder
    Brand?: SortOrderInput | SortOrder
    Sarine_Name?: SortOrderInput | SortOrder
    Internal_Clarity_Desc_Code?: SortOrderInput | SortOrder
    Clarity_Description?: SortOrderInput | SortOrder
    Modified_Rate?: SortOrderInput | SortOrder
    wire_discount_price?: SortOrderInput | SortOrder
    ImageLink?: SortOrderInput | SortOrder
    VideoLink?: SortOrderInput | SortOrder
    Video_HTML?: SortOrderInput | SortOrder
    CertificateLink?: SortOrderInput | SortOrder
    Rap_Price?: SortOrderInput | SortOrder
    Memo_Price?: SortOrderInput | SortOrder
    Memo_Discount_PER?: SortOrderInput | SortOrder
    Buy_Price?: SortOrderInput | SortOrder
    Buy_Price_Discount_PER?: SortOrderInput | SortOrder
    COD_Buy_Price?: SortOrderInput | SortOrder
    COD_Buy_Price_Discount_PER?: SortOrderInput | SortOrder
    Certificate?: SortOrderInput | SortOrder
    _count?: DiamondCountOrderByAggregateInput
    _avg?: DiamondAvgOrderByAggregateInput
    _max?: DiamondMaxOrderByAggregateInput
    _min?: DiamondMinOrderByAggregateInput
    _sum?: DiamondSumOrderByAggregateInput
  }

  export type DiamondScalarWhereWithAggregatesInput = {
    AND?: DiamondScalarWhereWithAggregatesInput | DiamondScalarWhereWithAggregatesInput[]
    OR?: DiamondScalarWhereWithAggregatesInput[]
    NOT?: DiamondScalarWhereWithAggregatesInput | DiamondScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Diamond"> | number
    Stock_No?: StringWithAggregatesFilter<"Diamond"> | string
    Availability?: StringNullableWithAggregatesFilter<"Diamond"> | string | null
    Shape?: StringNullableWithAggregatesFilter<"Diamond"> | string | null
    Weight?: FloatNullableWithAggregatesFilter<"Diamond"> | number | null
    Color?: StringNullableWithAggregatesFilter<"Diamond"> | string | null
    Clarity?: StringNullableWithAggregatesFilter<"Diamond"> | string | null
    Cut_Grade?: StringNullableWithAggregatesFilter<"Diamond"> | string | null
    Polish?: StringNullableWithAggregatesFilter<"Diamond"> | string | null
    Symmetry?: StringNullableWithAggregatesFilter<"Diamond"> | string | null
    Fluorescence_Intensity?: StringNullableWithAggregatesFilter<"Diamond"> | string | null
    Fluorescence_Color?: StringNullableWithAggregatesFilter<"Diamond"> | string | null
    Measurements?: StringNullableWithAggregatesFilter<"Diamond"> | string | null
    Lab?: StringNullableWithAggregatesFilter<"Diamond"> | string | null
    Treatment?: StringNullableWithAggregatesFilter<"Diamond"> | string | null
    FancyColor?: StringNullableWithAggregatesFilter<"Diamond"> | string | null
    Fancy_Color_Intensity?: StringNullableWithAggregatesFilter<"Diamond"> | string | null
    FancyColorOvertone?: StringNullableWithAggregatesFilter<"Diamond"> | string | null
    DEPTH_PER?: FloatNullableWithAggregatesFilter<"Diamond"> | number | null
    TABLE_PER?: FloatNullableWithAggregatesFilter<"Diamond"> | number | null
    Girdle_Min?: FloatNullableWithAggregatesFilter<"Diamond"> | number | null
    Girdle_Max?: FloatNullableWithAggregatesFilter<"Diamond"> | number | null
    Girdle_Per?: FloatNullableWithAggregatesFilter<"Diamond"> | number | null
    Girdle_Condition?: StringNullableWithAggregatesFilter<"Diamond"> | string | null
    Culet_Size?: StringNullableWithAggregatesFilter<"Diamond"> | string | null
    Culet_Condition?: StringNullableWithAggregatesFilter<"Diamond"> | string | null
    Crown_Height?: FloatNullableWithAggregatesFilter<"Diamond"> | number | null
    Crown_Angle?: FloatNullableWithAggregatesFilter<"Diamond"> | number | null
    Pavilion_Depth?: FloatNullableWithAggregatesFilter<"Diamond"> | number | null
    Pavilion_Angle?: FloatNullableWithAggregatesFilter<"Diamond"> | number | null
    Cert_Comments?: StringNullableWithAggregatesFilter<"Diamond"> | string | null
    Country?: StringNullableWithAggregatesFilter<"Diamond"> | string | null
    State?: StringNullableWithAggregatesFilter<"Diamond"> | string | null
    City?: StringNullableWithAggregatesFilter<"Diamond"> | string | null
    Country_Of_Origin?: StringNullableWithAggregatesFilter<"Diamond"> | string | null
    Key_To_Symbols?: StringNullableWithAggregatesFilter<"Diamond"> | string | null
    Shade?: StringNullableWithAggregatesFilter<"Diamond"> | string | null
    Star_Length?: StringNullableWithAggregatesFilter<"Diamond"> | string | null
    Report_Issue_Date?: DateTimeNullableWithAggregatesFilter<"Diamond"> | Date | string | null
    Report_Type?: StringNullableWithAggregatesFilter<"Diamond"> | string | null
    Milky?: StringNullableWithAggregatesFilter<"Diamond"> | string | null
    Eye_Clean?: StringNullableWithAggregatesFilter<"Diamond"> | string | null
    Gemprint_ID?: StringNullableWithAggregatesFilter<"Diamond"> | string | null
    BGM?: StringNullableWithAggregatesFilter<"Diamond"> | string | null
    Ratio?: FloatNullableWithAggregatesFilter<"Diamond"> | number | null
    Diamond_Type?: StringNullableWithAggregatesFilter<"Diamond"> | string | null
    Member_Comments?: StringNullableWithAggregatesFilter<"Diamond"> | string | null
    Time_to_Location?: StringNullableWithAggregatesFilter<"Diamond"> | string | null
    LsMatchedPairSeparable?: StringNullableWithAggregatesFilter<"Diamond"> | string | null
    Pair_Stock?: StringNullableWithAggregatesFilter<"Diamond"> | string | null
    Allow_Raplink_Feed?: StringNullableWithAggregatesFilter<"Diamond"> | string | null
    Parcel_Stones?: StringNullableWithAggregatesFilter<"Diamond"> | string | null
    Center_Inclusion?: StringNullableWithAggregatesFilter<"Diamond"> | string | null
    Black_Inclusion?: StringNullableWithAggregatesFilter<"Diamond"> | string | null
    Lab_Location?: StringNullableWithAggregatesFilter<"Diamond"> | string | null
    Brand?: StringNullableWithAggregatesFilter<"Diamond"> | string | null
    Sarine_Name?: StringNullableWithAggregatesFilter<"Diamond"> | string | null
    Internal_Clarity_Desc_Code?: StringNullableWithAggregatesFilter<"Diamond"> | string | null
    Clarity_Description?: StringNullableWithAggregatesFilter<"Diamond"> | string | null
    Modified_Rate?: FloatNullableWithAggregatesFilter<"Diamond"> | number | null
    wire_discount_price?: FloatNullableWithAggregatesFilter<"Diamond"> | number | null
    ImageLink?: StringNullableWithAggregatesFilter<"Diamond"> | string | null
    VideoLink?: StringNullableWithAggregatesFilter<"Diamond"> | string | null
    Video_HTML?: StringNullableWithAggregatesFilter<"Diamond"> | string | null
    CertificateLink?: StringNullableWithAggregatesFilter<"Diamond"> | string | null
    Rap_Price?: FloatNullableWithAggregatesFilter<"Diamond"> | number | null
    Memo_Price?: FloatNullableWithAggregatesFilter<"Diamond"> | number | null
    Memo_Discount_PER?: FloatNullableWithAggregatesFilter<"Diamond"> | number | null
    Buy_Price?: FloatNullableWithAggregatesFilter<"Diamond"> | number | null
    Buy_Price_Discount_PER?: FloatNullableWithAggregatesFilter<"Diamond"> | number | null
    COD_Buy_Price?: FloatNullableWithAggregatesFilter<"Diamond"> | number | null
    COD_Buy_Price_Discount_PER?: FloatNullableWithAggregatesFilter<"Diamond"> | number | null
    Certificate?: StringNullableWithAggregatesFilter<"Diamond"> | string | null
  }

  export type SessionCreateInput = {
    id: string
    shop: string
    state: string
    isOnline?: boolean
    scope?: string | null
    expires?: Date | string | null
    accessToken: string
    userId?: bigint | number | null
    firstName?: string | null
    lastName?: string | null
    email?: string | null
    accountOwner?: boolean
    locale?: string | null
    collaborator?: boolean | null
    emailVerified?: boolean | null
  }

  export type SessionUncheckedCreateInput = {
    id: string
    shop: string
    state: string
    isOnline?: boolean
    scope?: string | null
    expires?: Date | string | null
    accessToken: string
    userId?: bigint | number | null
    firstName?: string | null
    lastName?: string | null
    email?: string | null
    accountOwner?: boolean
    locale?: string | null
    collaborator?: boolean | null
    emailVerified?: boolean | null
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    shop?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    expires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accessToken?: StringFieldUpdateOperationsInput | string
    userId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    accountOwner?: BoolFieldUpdateOperationsInput | boolean
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    collaborator?: NullableBoolFieldUpdateOperationsInput | boolean | null
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    shop?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    expires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accessToken?: StringFieldUpdateOperationsInput | string
    userId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    accountOwner?: BoolFieldUpdateOperationsInput | boolean
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    collaborator?: NullableBoolFieldUpdateOperationsInput | boolean | null
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type SessionCreateManyInput = {
    id: string
    shop: string
    state: string
    isOnline?: boolean
    scope?: string | null
    expires?: Date | string | null
    accessToken: string
    userId?: bigint | number | null
    firstName?: string | null
    lastName?: string | null
    email?: string | null
    accountOwner?: boolean
    locale?: string | null
    collaborator?: boolean | null
    emailVerified?: boolean | null
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    shop?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    expires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accessToken?: StringFieldUpdateOperationsInput | string
    userId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    accountOwner?: BoolFieldUpdateOperationsInput | boolean
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    collaborator?: NullableBoolFieldUpdateOperationsInput | boolean | null
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    shop?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    expires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    accessToken?: StringFieldUpdateOperationsInput | string
    userId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    accountOwner?: BoolFieldUpdateOperationsInput | boolean
    locale?: NullableStringFieldUpdateOperationsInput | string | null
    collaborator?: NullableBoolFieldUpdateOperationsInput | boolean | null
    emailVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type ProductCreateInput = {
    title: string
    price: number
    description: string
    category: string
    image: string
    rating?: RatingCreateNestedOneWithoutProductInput
  }

  export type ProductUncheckedCreateInput = {
    id?: number
    title: string
    price: number
    description: string
    category: string
    image: string
    ratingId?: number | null
  }

  export type ProductUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    rating?: RatingUpdateOneWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    ratingId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ProductCreateManyInput = {
    id?: number
    title: string
    price: number
    description: string
    category: string
    image: string
    ratingId?: number | null
  }

  export type ProductUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type ProductUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    ratingId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type RatingCreateInput = {
    rate: number
    count: number
    productId?: number | null
    product?: ProductCreateNestedOneWithoutRatingInput
  }

  export type RatingUncheckedCreateInput = {
    id?: number
    rate: number
    count: number
    productId?: number | null
    product?: ProductUncheckedCreateNestedOneWithoutRatingInput
  }

  export type RatingUpdateInput = {
    rate?: FloatFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    productId?: NullableIntFieldUpdateOperationsInput | number | null
    product?: ProductUpdateOneWithoutRatingNestedInput
  }

  export type RatingUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    rate?: FloatFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    productId?: NullableIntFieldUpdateOperationsInput | number | null
    product?: ProductUncheckedUpdateOneWithoutRatingNestedInput
  }

  export type RatingCreateManyInput = {
    id?: number
    rate: number
    count: number
    productId?: number | null
  }

  export type RatingUpdateManyMutationInput = {
    rate?: FloatFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    productId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type RatingUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    rate?: FloatFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    productId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type DiamondCreateInput = {
    Stock_No: string
    Availability?: string | null
    Shape?: string | null
    Weight?: number | null
    Color?: string | null
    Clarity?: string | null
    Cut_Grade?: string | null
    Polish?: string | null
    Symmetry?: string | null
    Fluorescence_Intensity?: string | null
    Fluorescence_Color?: string | null
    Measurements?: string | null
    Lab?: string | null
    Treatment?: string | null
    FancyColor?: string | null
    Fancy_Color_Intensity?: string | null
    FancyColorOvertone?: string | null
    DEPTH_PER?: number | null
    TABLE_PER?: number | null
    Girdle_Min?: number | null
    Girdle_Max?: number | null
    Girdle_Per?: number | null
    Girdle_Condition?: string | null
    Culet_Size?: string | null
    Culet_Condition?: string | null
    Crown_Height?: number | null
    Crown_Angle?: number | null
    Pavilion_Depth?: number | null
    Pavilion_Angle?: number | null
    Cert_Comments?: string | null
    Country?: string | null
    State?: string | null
    City?: string | null
    Country_Of_Origin?: string | null
    Key_To_Symbols?: string | null
    Shade?: string | null
    Star_Length?: string | null
    Report_Issue_Date?: Date | string | null
    Report_Type?: string | null
    Milky?: string | null
    Eye_Clean?: string | null
    Gemprint_ID?: string | null
    BGM?: string | null
    Ratio?: number | null
    Diamond_Type?: string | null
    Member_Comments?: string | null
    Time_to_Location?: string | null
    LsMatchedPairSeparable?: string | null
    Pair_Stock?: string | null
    Allow_Raplink_Feed?: string | null
    Parcel_Stones?: string | null
    Center_Inclusion?: string | null
    Black_Inclusion?: string | null
    Lab_Location?: string | null
    Brand?: string | null
    Sarine_Name?: string | null
    Internal_Clarity_Desc_Code?: string | null
    Clarity_Description?: string | null
    Modified_Rate?: number | null
    wire_discount_price?: number | null
    ImageLink?: string | null
    VideoLink?: string | null
    Video_HTML?: string | null
    CertificateLink?: string | null
    Rap_Price?: number | null
    Memo_Price?: number | null
    Memo_Discount_PER?: number | null
    Buy_Price?: number | null
    Buy_Price_Discount_PER?: number | null
    COD_Buy_Price?: number | null
    COD_Buy_Price_Discount_PER?: number | null
    Certificate?: string | null
  }

  export type DiamondUncheckedCreateInput = {
    id?: number
    Stock_No: string
    Availability?: string | null
    Shape?: string | null
    Weight?: number | null
    Color?: string | null
    Clarity?: string | null
    Cut_Grade?: string | null
    Polish?: string | null
    Symmetry?: string | null
    Fluorescence_Intensity?: string | null
    Fluorescence_Color?: string | null
    Measurements?: string | null
    Lab?: string | null
    Treatment?: string | null
    FancyColor?: string | null
    Fancy_Color_Intensity?: string | null
    FancyColorOvertone?: string | null
    DEPTH_PER?: number | null
    TABLE_PER?: number | null
    Girdle_Min?: number | null
    Girdle_Max?: number | null
    Girdle_Per?: number | null
    Girdle_Condition?: string | null
    Culet_Size?: string | null
    Culet_Condition?: string | null
    Crown_Height?: number | null
    Crown_Angle?: number | null
    Pavilion_Depth?: number | null
    Pavilion_Angle?: number | null
    Cert_Comments?: string | null
    Country?: string | null
    State?: string | null
    City?: string | null
    Country_Of_Origin?: string | null
    Key_To_Symbols?: string | null
    Shade?: string | null
    Star_Length?: string | null
    Report_Issue_Date?: Date | string | null
    Report_Type?: string | null
    Milky?: string | null
    Eye_Clean?: string | null
    Gemprint_ID?: string | null
    BGM?: string | null
    Ratio?: number | null
    Diamond_Type?: string | null
    Member_Comments?: string | null
    Time_to_Location?: string | null
    LsMatchedPairSeparable?: string | null
    Pair_Stock?: string | null
    Allow_Raplink_Feed?: string | null
    Parcel_Stones?: string | null
    Center_Inclusion?: string | null
    Black_Inclusion?: string | null
    Lab_Location?: string | null
    Brand?: string | null
    Sarine_Name?: string | null
    Internal_Clarity_Desc_Code?: string | null
    Clarity_Description?: string | null
    Modified_Rate?: number | null
    wire_discount_price?: number | null
    ImageLink?: string | null
    VideoLink?: string | null
    Video_HTML?: string | null
    CertificateLink?: string | null
    Rap_Price?: number | null
    Memo_Price?: number | null
    Memo_Discount_PER?: number | null
    Buy_Price?: number | null
    Buy_Price_Discount_PER?: number | null
    COD_Buy_Price?: number | null
    COD_Buy_Price_Discount_PER?: number | null
    Certificate?: string | null
  }

  export type DiamondUpdateInput = {
    Stock_No?: StringFieldUpdateOperationsInput | string
    Availability?: NullableStringFieldUpdateOperationsInput | string | null
    Shape?: NullableStringFieldUpdateOperationsInput | string | null
    Weight?: NullableFloatFieldUpdateOperationsInput | number | null
    Color?: NullableStringFieldUpdateOperationsInput | string | null
    Clarity?: NullableStringFieldUpdateOperationsInput | string | null
    Cut_Grade?: NullableStringFieldUpdateOperationsInput | string | null
    Polish?: NullableStringFieldUpdateOperationsInput | string | null
    Symmetry?: NullableStringFieldUpdateOperationsInput | string | null
    Fluorescence_Intensity?: NullableStringFieldUpdateOperationsInput | string | null
    Fluorescence_Color?: NullableStringFieldUpdateOperationsInput | string | null
    Measurements?: NullableStringFieldUpdateOperationsInput | string | null
    Lab?: NullableStringFieldUpdateOperationsInput | string | null
    Treatment?: NullableStringFieldUpdateOperationsInput | string | null
    FancyColor?: NullableStringFieldUpdateOperationsInput | string | null
    Fancy_Color_Intensity?: NullableStringFieldUpdateOperationsInput | string | null
    FancyColorOvertone?: NullableStringFieldUpdateOperationsInput | string | null
    DEPTH_PER?: NullableFloatFieldUpdateOperationsInput | number | null
    TABLE_PER?: NullableFloatFieldUpdateOperationsInput | number | null
    Girdle_Min?: NullableFloatFieldUpdateOperationsInput | number | null
    Girdle_Max?: NullableFloatFieldUpdateOperationsInput | number | null
    Girdle_Per?: NullableFloatFieldUpdateOperationsInput | number | null
    Girdle_Condition?: NullableStringFieldUpdateOperationsInput | string | null
    Culet_Size?: NullableStringFieldUpdateOperationsInput | string | null
    Culet_Condition?: NullableStringFieldUpdateOperationsInput | string | null
    Crown_Height?: NullableFloatFieldUpdateOperationsInput | number | null
    Crown_Angle?: NullableFloatFieldUpdateOperationsInput | number | null
    Pavilion_Depth?: NullableFloatFieldUpdateOperationsInput | number | null
    Pavilion_Angle?: NullableFloatFieldUpdateOperationsInput | number | null
    Cert_Comments?: NullableStringFieldUpdateOperationsInput | string | null
    Country?: NullableStringFieldUpdateOperationsInput | string | null
    State?: NullableStringFieldUpdateOperationsInput | string | null
    City?: NullableStringFieldUpdateOperationsInput | string | null
    Country_Of_Origin?: NullableStringFieldUpdateOperationsInput | string | null
    Key_To_Symbols?: NullableStringFieldUpdateOperationsInput | string | null
    Shade?: NullableStringFieldUpdateOperationsInput | string | null
    Star_Length?: NullableStringFieldUpdateOperationsInput | string | null
    Report_Issue_Date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Report_Type?: NullableStringFieldUpdateOperationsInput | string | null
    Milky?: NullableStringFieldUpdateOperationsInput | string | null
    Eye_Clean?: NullableStringFieldUpdateOperationsInput | string | null
    Gemprint_ID?: NullableStringFieldUpdateOperationsInput | string | null
    BGM?: NullableStringFieldUpdateOperationsInput | string | null
    Ratio?: NullableFloatFieldUpdateOperationsInput | number | null
    Diamond_Type?: NullableStringFieldUpdateOperationsInput | string | null
    Member_Comments?: NullableStringFieldUpdateOperationsInput | string | null
    Time_to_Location?: NullableStringFieldUpdateOperationsInput | string | null
    LsMatchedPairSeparable?: NullableStringFieldUpdateOperationsInput | string | null
    Pair_Stock?: NullableStringFieldUpdateOperationsInput | string | null
    Allow_Raplink_Feed?: NullableStringFieldUpdateOperationsInput | string | null
    Parcel_Stones?: NullableStringFieldUpdateOperationsInput | string | null
    Center_Inclusion?: NullableStringFieldUpdateOperationsInput | string | null
    Black_Inclusion?: NullableStringFieldUpdateOperationsInput | string | null
    Lab_Location?: NullableStringFieldUpdateOperationsInput | string | null
    Brand?: NullableStringFieldUpdateOperationsInput | string | null
    Sarine_Name?: NullableStringFieldUpdateOperationsInput | string | null
    Internal_Clarity_Desc_Code?: NullableStringFieldUpdateOperationsInput | string | null
    Clarity_Description?: NullableStringFieldUpdateOperationsInput | string | null
    Modified_Rate?: NullableFloatFieldUpdateOperationsInput | number | null
    wire_discount_price?: NullableFloatFieldUpdateOperationsInput | number | null
    ImageLink?: NullableStringFieldUpdateOperationsInput | string | null
    VideoLink?: NullableStringFieldUpdateOperationsInput | string | null
    Video_HTML?: NullableStringFieldUpdateOperationsInput | string | null
    CertificateLink?: NullableStringFieldUpdateOperationsInput | string | null
    Rap_Price?: NullableFloatFieldUpdateOperationsInput | number | null
    Memo_Price?: NullableFloatFieldUpdateOperationsInput | number | null
    Memo_Discount_PER?: NullableFloatFieldUpdateOperationsInput | number | null
    Buy_Price?: NullableFloatFieldUpdateOperationsInput | number | null
    Buy_Price_Discount_PER?: NullableFloatFieldUpdateOperationsInput | number | null
    COD_Buy_Price?: NullableFloatFieldUpdateOperationsInput | number | null
    COD_Buy_Price_Discount_PER?: NullableFloatFieldUpdateOperationsInput | number | null
    Certificate?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DiamondUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    Stock_No?: StringFieldUpdateOperationsInput | string
    Availability?: NullableStringFieldUpdateOperationsInput | string | null
    Shape?: NullableStringFieldUpdateOperationsInput | string | null
    Weight?: NullableFloatFieldUpdateOperationsInput | number | null
    Color?: NullableStringFieldUpdateOperationsInput | string | null
    Clarity?: NullableStringFieldUpdateOperationsInput | string | null
    Cut_Grade?: NullableStringFieldUpdateOperationsInput | string | null
    Polish?: NullableStringFieldUpdateOperationsInput | string | null
    Symmetry?: NullableStringFieldUpdateOperationsInput | string | null
    Fluorescence_Intensity?: NullableStringFieldUpdateOperationsInput | string | null
    Fluorescence_Color?: NullableStringFieldUpdateOperationsInput | string | null
    Measurements?: NullableStringFieldUpdateOperationsInput | string | null
    Lab?: NullableStringFieldUpdateOperationsInput | string | null
    Treatment?: NullableStringFieldUpdateOperationsInput | string | null
    FancyColor?: NullableStringFieldUpdateOperationsInput | string | null
    Fancy_Color_Intensity?: NullableStringFieldUpdateOperationsInput | string | null
    FancyColorOvertone?: NullableStringFieldUpdateOperationsInput | string | null
    DEPTH_PER?: NullableFloatFieldUpdateOperationsInput | number | null
    TABLE_PER?: NullableFloatFieldUpdateOperationsInput | number | null
    Girdle_Min?: NullableFloatFieldUpdateOperationsInput | number | null
    Girdle_Max?: NullableFloatFieldUpdateOperationsInput | number | null
    Girdle_Per?: NullableFloatFieldUpdateOperationsInput | number | null
    Girdle_Condition?: NullableStringFieldUpdateOperationsInput | string | null
    Culet_Size?: NullableStringFieldUpdateOperationsInput | string | null
    Culet_Condition?: NullableStringFieldUpdateOperationsInput | string | null
    Crown_Height?: NullableFloatFieldUpdateOperationsInput | number | null
    Crown_Angle?: NullableFloatFieldUpdateOperationsInput | number | null
    Pavilion_Depth?: NullableFloatFieldUpdateOperationsInput | number | null
    Pavilion_Angle?: NullableFloatFieldUpdateOperationsInput | number | null
    Cert_Comments?: NullableStringFieldUpdateOperationsInput | string | null
    Country?: NullableStringFieldUpdateOperationsInput | string | null
    State?: NullableStringFieldUpdateOperationsInput | string | null
    City?: NullableStringFieldUpdateOperationsInput | string | null
    Country_Of_Origin?: NullableStringFieldUpdateOperationsInput | string | null
    Key_To_Symbols?: NullableStringFieldUpdateOperationsInput | string | null
    Shade?: NullableStringFieldUpdateOperationsInput | string | null
    Star_Length?: NullableStringFieldUpdateOperationsInput | string | null
    Report_Issue_Date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Report_Type?: NullableStringFieldUpdateOperationsInput | string | null
    Milky?: NullableStringFieldUpdateOperationsInput | string | null
    Eye_Clean?: NullableStringFieldUpdateOperationsInput | string | null
    Gemprint_ID?: NullableStringFieldUpdateOperationsInput | string | null
    BGM?: NullableStringFieldUpdateOperationsInput | string | null
    Ratio?: NullableFloatFieldUpdateOperationsInput | number | null
    Diamond_Type?: NullableStringFieldUpdateOperationsInput | string | null
    Member_Comments?: NullableStringFieldUpdateOperationsInput | string | null
    Time_to_Location?: NullableStringFieldUpdateOperationsInput | string | null
    LsMatchedPairSeparable?: NullableStringFieldUpdateOperationsInput | string | null
    Pair_Stock?: NullableStringFieldUpdateOperationsInput | string | null
    Allow_Raplink_Feed?: NullableStringFieldUpdateOperationsInput | string | null
    Parcel_Stones?: NullableStringFieldUpdateOperationsInput | string | null
    Center_Inclusion?: NullableStringFieldUpdateOperationsInput | string | null
    Black_Inclusion?: NullableStringFieldUpdateOperationsInput | string | null
    Lab_Location?: NullableStringFieldUpdateOperationsInput | string | null
    Brand?: NullableStringFieldUpdateOperationsInput | string | null
    Sarine_Name?: NullableStringFieldUpdateOperationsInput | string | null
    Internal_Clarity_Desc_Code?: NullableStringFieldUpdateOperationsInput | string | null
    Clarity_Description?: NullableStringFieldUpdateOperationsInput | string | null
    Modified_Rate?: NullableFloatFieldUpdateOperationsInput | number | null
    wire_discount_price?: NullableFloatFieldUpdateOperationsInput | number | null
    ImageLink?: NullableStringFieldUpdateOperationsInput | string | null
    VideoLink?: NullableStringFieldUpdateOperationsInput | string | null
    Video_HTML?: NullableStringFieldUpdateOperationsInput | string | null
    CertificateLink?: NullableStringFieldUpdateOperationsInput | string | null
    Rap_Price?: NullableFloatFieldUpdateOperationsInput | number | null
    Memo_Price?: NullableFloatFieldUpdateOperationsInput | number | null
    Memo_Discount_PER?: NullableFloatFieldUpdateOperationsInput | number | null
    Buy_Price?: NullableFloatFieldUpdateOperationsInput | number | null
    Buy_Price_Discount_PER?: NullableFloatFieldUpdateOperationsInput | number | null
    COD_Buy_Price?: NullableFloatFieldUpdateOperationsInput | number | null
    COD_Buy_Price_Discount_PER?: NullableFloatFieldUpdateOperationsInput | number | null
    Certificate?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DiamondCreateManyInput = {
    id?: number
    Stock_No: string
    Availability?: string | null
    Shape?: string | null
    Weight?: number | null
    Color?: string | null
    Clarity?: string | null
    Cut_Grade?: string | null
    Polish?: string | null
    Symmetry?: string | null
    Fluorescence_Intensity?: string | null
    Fluorescence_Color?: string | null
    Measurements?: string | null
    Lab?: string | null
    Treatment?: string | null
    FancyColor?: string | null
    Fancy_Color_Intensity?: string | null
    FancyColorOvertone?: string | null
    DEPTH_PER?: number | null
    TABLE_PER?: number | null
    Girdle_Min?: number | null
    Girdle_Max?: number | null
    Girdle_Per?: number | null
    Girdle_Condition?: string | null
    Culet_Size?: string | null
    Culet_Condition?: string | null
    Crown_Height?: number | null
    Crown_Angle?: number | null
    Pavilion_Depth?: number | null
    Pavilion_Angle?: number | null
    Cert_Comments?: string | null
    Country?: string | null
    State?: string | null
    City?: string | null
    Country_Of_Origin?: string | null
    Key_To_Symbols?: string | null
    Shade?: string | null
    Star_Length?: string | null
    Report_Issue_Date?: Date | string | null
    Report_Type?: string | null
    Milky?: string | null
    Eye_Clean?: string | null
    Gemprint_ID?: string | null
    BGM?: string | null
    Ratio?: number | null
    Diamond_Type?: string | null
    Member_Comments?: string | null
    Time_to_Location?: string | null
    LsMatchedPairSeparable?: string | null
    Pair_Stock?: string | null
    Allow_Raplink_Feed?: string | null
    Parcel_Stones?: string | null
    Center_Inclusion?: string | null
    Black_Inclusion?: string | null
    Lab_Location?: string | null
    Brand?: string | null
    Sarine_Name?: string | null
    Internal_Clarity_Desc_Code?: string | null
    Clarity_Description?: string | null
    Modified_Rate?: number | null
    wire_discount_price?: number | null
    ImageLink?: string | null
    VideoLink?: string | null
    Video_HTML?: string | null
    CertificateLink?: string | null
    Rap_Price?: number | null
    Memo_Price?: number | null
    Memo_Discount_PER?: number | null
    Buy_Price?: number | null
    Buy_Price_Discount_PER?: number | null
    COD_Buy_Price?: number | null
    COD_Buy_Price_Discount_PER?: number | null
    Certificate?: string | null
  }

  export type DiamondUpdateManyMutationInput = {
    Stock_No?: StringFieldUpdateOperationsInput | string
    Availability?: NullableStringFieldUpdateOperationsInput | string | null
    Shape?: NullableStringFieldUpdateOperationsInput | string | null
    Weight?: NullableFloatFieldUpdateOperationsInput | number | null
    Color?: NullableStringFieldUpdateOperationsInput | string | null
    Clarity?: NullableStringFieldUpdateOperationsInput | string | null
    Cut_Grade?: NullableStringFieldUpdateOperationsInput | string | null
    Polish?: NullableStringFieldUpdateOperationsInput | string | null
    Symmetry?: NullableStringFieldUpdateOperationsInput | string | null
    Fluorescence_Intensity?: NullableStringFieldUpdateOperationsInput | string | null
    Fluorescence_Color?: NullableStringFieldUpdateOperationsInput | string | null
    Measurements?: NullableStringFieldUpdateOperationsInput | string | null
    Lab?: NullableStringFieldUpdateOperationsInput | string | null
    Treatment?: NullableStringFieldUpdateOperationsInput | string | null
    FancyColor?: NullableStringFieldUpdateOperationsInput | string | null
    Fancy_Color_Intensity?: NullableStringFieldUpdateOperationsInput | string | null
    FancyColorOvertone?: NullableStringFieldUpdateOperationsInput | string | null
    DEPTH_PER?: NullableFloatFieldUpdateOperationsInput | number | null
    TABLE_PER?: NullableFloatFieldUpdateOperationsInput | number | null
    Girdle_Min?: NullableFloatFieldUpdateOperationsInput | number | null
    Girdle_Max?: NullableFloatFieldUpdateOperationsInput | number | null
    Girdle_Per?: NullableFloatFieldUpdateOperationsInput | number | null
    Girdle_Condition?: NullableStringFieldUpdateOperationsInput | string | null
    Culet_Size?: NullableStringFieldUpdateOperationsInput | string | null
    Culet_Condition?: NullableStringFieldUpdateOperationsInput | string | null
    Crown_Height?: NullableFloatFieldUpdateOperationsInput | number | null
    Crown_Angle?: NullableFloatFieldUpdateOperationsInput | number | null
    Pavilion_Depth?: NullableFloatFieldUpdateOperationsInput | number | null
    Pavilion_Angle?: NullableFloatFieldUpdateOperationsInput | number | null
    Cert_Comments?: NullableStringFieldUpdateOperationsInput | string | null
    Country?: NullableStringFieldUpdateOperationsInput | string | null
    State?: NullableStringFieldUpdateOperationsInput | string | null
    City?: NullableStringFieldUpdateOperationsInput | string | null
    Country_Of_Origin?: NullableStringFieldUpdateOperationsInput | string | null
    Key_To_Symbols?: NullableStringFieldUpdateOperationsInput | string | null
    Shade?: NullableStringFieldUpdateOperationsInput | string | null
    Star_Length?: NullableStringFieldUpdateOperationsInput | string | null
    Report_Issue_Date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Report_Type?: NullableStringFieldUpdateOperationsInput | string | null
    Milky?: NullableStringFieldUpdateOperationsInput | string | null
    Eye_Clean?: NullableStringFieldUpdateOperationsInput | string | null
    Gemprint_ID?: NullableStringFieldUpdateOperationsInput | string | null
    BGM?: NullableStringFieldUpdateOperationsInput | string | null
    Ratio?: NullableFloatFieldUpdateOperationsInput | number | null
    Diamond_Type?: NullableStringFieldUpdateOperationsInput | string | null
    Member_Comments?: NullableStringFieldUpdateOperationsInput | string | null
    Time_to_Location?: NullableStringFieldUpdateOperationsInput | string | null
    LsMatchedPairSeparable?: NullableStringFieldUpdateOperationsInput | string | null
    Pair_Stock?: NullableStringFieldUpdateOperationsInput | string | null
    Allow_Raplink_Feed?: NullableStringFieldUpdateOperationsInput | string | null
    Parcel_Stones?: NullableStringFieldUpdateOperationsInput | string | null
    Center_Inclusion?: NullableStringFieldUpdateOperationsInput | string | null
    Black_Inclusion?: NullableStringFieldUpdateOperationsInput | string | null
    Lab_Location?: NullableStringFieldUpdateOperationsInput | string | null
    Brand?: NullableStringFieldUpdateOperationsInput | string | null
    Sarine_Name?: NullableStringFieldUpdateOperationsInput | string | null
    Internal_Clarity_Desc_Code?: NullableStringFieldUpdateOperationsInput | string | null
    Clarity_Description?: NullableStringFieldUpdateOperationsInput | string | null
    Modified_Rate?: NullableFloatFieldUpdateOperationsInput | number | null
    wire_discount_price?: NullableFloatFieldUpdateOperationsInput | number | null
    ImageLink?: NullableStringFieldUpdateOperationsInput | string | null
    VideoLink?: NullableStringFieldUpdateOperationsInput | string | null
    Video_HTML?: NullableStringFieldUpdateOperationsInput | string | null
    CertificateLink?: NullableStringFieldUpdateOperationsInput | string | null
    Rap_Price?: NullableFloatFieldUpdateOperationsInput | number | null
    Memo_Price?: NullableFloatFieldUpdateOperationsInput | number | null
    Memo_Discount_PER?: NullableFloatFieldUpdateOperationsInput | number | null
    Buy_Price?: NullableFloatFieldUpdateOperationsInput | number | null
    Buy_Price_Discount_PER?: NullableFloatFieldUpdateOperationsInput | number | null
    COD_Buy_Price?: NullableFloatFieldUpdateOperationsInput | number | null
    COD_Buy_Price_Discount_PER?: NullableFloatFieldUpdateOperationsInput | number | null
    Certificate?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DiamondUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    Stock_No?: StringFieldUpdateOperationsInput | string
    Availability?: NullableStringFieldUpdateOperationsInput | string | null
    Shape?: NullableStringFieldUpdateOperationsInput | string | null
    Weight?: NullableFloatFieldUpdateOperationsInput | number | null
    Color?: NullableStringFieldUpdateOperationsInput | string | null
    Clarity?: NullableStringFieldUpdateOperationsInput | string | null
    Cut_Grade?: NullableStringFieldUpdateOperationsInput | string | null
    Polish?: NullableStringFieldUpdateOperationsInput | string | null
    Symmetry?: NullableStringFieldUpdateOperationsInput | string | null
    Fluorescence_Intensity?: NullableStringFieldUpdateOperationsInput | string | null
    Fluorescence_Color?: NullableStringFieldUpdateOperationsInput | string | null
    Measurements?: NullableStringFieldUpdateOperationsInput | string | null
    Lab?: NullableStringFieldUpdateOperationsInput | string | null
    Treatment?: NullableStringFieldUpdateOperationsInput | string | null
    FancyColor?: NullableStringFieldUpdateOperationsInput | string | null
    Fancy_Color_Intensity?: NullableStringFieldUpdateOperationsInput | string | null
    FancyColorOvertone?: NullableStringFieldUpdateOperationsInput | string | null
    DEPTH_PER?: NullableFloatFieldUpdateOperationsInput | number | null
    TABLE_PER?: NullableFloatFieldUpdateOperationsInput | number | null
    Girdle_Min?: NullableFloatFieldUpdateOperationsInput | number | null
    Girdle_Max?: NullableFloatFieldUpdateOperationsInput | number | null
    Girdle_Per?: NullableFloatFieldUpdateOperationsInput | number | null
    Girdle_Condition?: NullableStringFieldUpdateOperationsInput | string | null
    Culet_Size?: NullableStringFieldUpdateOperationsInput | string | null
    Culet_Condition?: NullableStringFieldUpdateOperationsInput | string | null
    Crown_Height?: NullableFloatFieldUpdateOperationsInput | number | null
    Crown_Angle?: NullableFloatFieldUpdateOperationsInput | number | null
    Pavilion_Depth?: NullableFloatFieldUpdateOperationsInput | number | null
    Pavilion_Angle?: NullableFloatFieldUpdateOperationsInput | number | null
    Cert_Comments?: NullableStringFieldUpdateOperationsInput | string | null
    Country?: NullableStringFieldUpdateOperationsInput | string | null
    State?: NullableStringFieldUpdateOperationsInput | string | null
    City?: NullableStringFieldUpdateOperationsInput | string | null
    Country_Of_Origin?: NullableStringFieldUpdateOperationsInput | string | null
    Key_To_Symbols?: NullableStringFieldUpdateOperationsInput | string | null
    Shade?: NullableStringFieldUpdateOperationsInput | string | null
    Star_Length?: NullableStringFieldUpdateOperationsInput | string | null
    Report_Issue_Date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Report_Type?: NullableStringFieldUpdateOperationsInput | string | null
    Milky?: NullableStringFieldUpdateOperationsInput | string | null
    Eye_Clean?: NullableStringFieldUpdateOperationsInput | string | null
    Gemprint_ID?: NullableStringFieldUpdateOperationsInput | string | null
    BGM?: NullableStringFieldUpdateOperationsInput | string | null
    Ratio?: NullableFloatFieldUpdateOperationsInput | number | null
    Diamond_Type?: NullableStringFieldUpdateOperationsInput | string | null
    Member_Comments?: NullableStringFieldUpdateOperationsInput | string | null
    Time_to_Location?: NullableStringFieldUpdateOperationsInput | string | null
    LsMatchedPairSeparable?: NullableStringFieldUpdateOperationsInput | string | null
    Pair_Stock?: NullableStringFieldUpdateOperationsInput | string | null
    Allow_Raplink_Feed?: NullableStringFieldUpdateOperationsInput | string | null
    Parcel_Stones?: NullableStringFieldUpdateOperationsInput | string | null
    Center_Inclusion?: NullableStringFieldUpdateOperationsInput | string | null
    Black_Inclusion?: NullableStringFieldUpdateOperationsInput | string | null
    Lab_Location?: NullableStringFieldUpdateOperationsInput | string | null
    Brand?: NullableStringFieldUpdateOperationsInput | string | null
    Sarine_Name?: NullableStringFieldUpdateOperationsInput | string | null
    Internal_Clarity_Desc_Code?: NullableStringFieldUpdateOperationsInput | string | null
    Clarity_Description?: NullableStringFieldUpdateOperationsInput | string | null
    Modified_Rate?: NullableFloatFieldUpdateOperationsInput | number | null
    wire_discount_price?: NullableFloatFieldUpdateOperationsInput | number | null
    ImageLink?: NullableStringFieldUpdateOperationsInput | string | null
    VideoLink?: NullableStringFieldUpdateOperationsInput | string | null
    Video_HTML?: NullableStringFieldUpdateOperationsInput | string | null
    CertificateLink?: NullableStringFieldUpdateOperationsInput | string | null
    Rap_Price?: NullableFloatFieldUpdateOperationsInput | number | null
    Memo_Price?: NullableFloatFieldUpdateOperationsInput | number | null
    Memo_Discount_PER?: NullableFloatFieldUpdateOperationsInput | number | null
    Buy_Price?: NullableFloatFieldUpdateOperationsInput | number | null
    Buy_Price_Discount_PER?: NullableFloatFieldUpdateOperationsInput | number | null
    COD_Buy_Price?: NullableFloatFieldUpdateOperationsInput | number | null
    COD_Buy_Price_Discount_PER?: NullableFloatFieldUpdateOperationsInput | number | null
    Certificate?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type BigIntNullableFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | null
    notIn?: bigint[] | number[] | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableFilter<$PrismaModel> | bigint | number | null
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    shop?: SortOrder
    state?: SortOrder
    isOnline?: SortOrder
    scope?: SortOrder
    expires?: SortOrder
    accessToken?: SortOrder
    userId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    accountOwner?: SortOrder
    locale?: SortOrder
    collaborator?: SortOrder
    emailVerified?: SortOrder
  }

  export type SessionAvgOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    shop?: SortOrder
    state?: SortOrder
    isOnline?: SortOrder
    scope?: SortOrder
    expires?: SortOrder
    accessToken?: SortOrder
    userId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    accountOwner?: SortOrder
    locale?: SortOrder
    collaborator?: SortOrder
    emailVerified?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    shop?: SortOrder
    state?: SortOrder
    isOnline?: SortOrder
    scope?: SortOrder
    expires?: SortOrder
    accessToken?: SortOrder
    userId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    accountOwner?: SortOrder
    locale?: SortOrder
    collaborator?: SortOrder
    emailVerified?: SortOrder
  }

  export type SessionSumOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type BigIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | null
    notIn?: bigint[] | number[] | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableWithAggregatesFilter<$PrismaModel> | bigint | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedBigIntNullableFilter<$PrismaModel>
    _min?: NestedBigIntNullableFilter<$PrismaModel>
    _max?: NestedBigIntNullableFilter<$PrismaModel>
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type RatingNullableRelationFilter = {
    is?: RatingWhereInput | null
    isNot?: RatingWhereInput | null
  }

  export type ProductCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    price?: SortOrder
    description?: SortOrder
    category?: SortOrder
    image?: SortOrder
    ratingId?: SortOrder
  }

  export type ProductAvgOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    ratingId?: SortOrder
  }

  export type ProductMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    price?: SortOrder
    description?: SortOrder
    category?: SortOrder
    image?: SortOrder
    ratingId?: SortOrder
  }

  export type ProductMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    price?: SortOrder
    description?: SortOrder
    category?: SortOrder
    image?: SortOrder
    ratingId?: SortOrder
  }

  export type ProductSumOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    ratingId?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type ProductNullableRelationFilter = {
    is?: ProductWhereInput | null
    isNot?: ProductWhereInput | null
  }

  export type RatingCountOrderByAggregateInput = {
    id?: SortOrder
    rate?: SortOrder
    count?: SortOrder
    productId?: SortOrder
  }

  export type RatingAvgOrderByAggregateInput = {
    id?: SortOrder
    rate?: SortOrder
    count?: SortOrder
    productId?: SortOrder
  }

  export type RatingMaxOrderByAggregateInput = {
    id?: SortOrder
    rate?: SortOrder
    count?: SortOrder
    productId?: SortOrder
  }

  export type RatingMinOrderByAggregateInput = {
    id?: SortOrder
    rate?: SortOrder
    count?: SortOrder
    productId?: SortOrder
  }

  export type RatingSumOrderByAggregateInput = {
    id?: SortOrder
    rate?: SortOrder
    count?: SortOrder
    productId?: SortOrder
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type DiamondCountOrderByAggregateInput = {
    id?: SortOrder
    Stock_No?: SortOrder
    Availability?: SortOrder
    Shape?: SortOrder
    Weight?: SortOrder
    Color?: SortOrder
    Clarity?: SortOrder
    Cut_Grade?: SortOrder
    Polish?: SortOrder
    Symmetry?: SortOrder
    Fluorescence_Intensity?: SortOrder
    Fluorescence_Color?: SortOrder
    Measurements?: SortOrder
    Lab?: SortOrder
    Treatment?: SortOrder
    FancyColor?: SortOrder
    Fancy_Color_Intensity?: SortOrder
    FancyColorOvertone?: SortOrder
    DEPTH_PER?: SortOrder
    TABLE_PER?: SortOrder
    Girdle_Min?: SortOrder
    Girdle_Max?: SortOrder
    Girdle_Per?: SortOrder
    Girdle_Condition?: SortOrder
    Culet_Size?: SortOrder
    Culet_Condition?: SortOrder
    Crown_Height?: SortOrder
    Crown_Angle?: SortOrder
    Pavilion_Depth?: SortOrder
    Pavilion_Angle?: SortOrder
    Cert_Comments?: SortOrder
    Country?: SortOrder
    State?: SortOrder
    City?: SortOrder
    Country_Of_Origin?: SortOrder
    Key_To_Symbols?: SortOrder
    Shade?: SortOrder
    Star_Length?: SortOrder
    Report_Issue_Date?: SortOrder
    Report_Type?: SortOrder
    Milky?: SortOrder
    Eye_Clean?: SortOrder
    Gemprint_ID?: SortOrder
    BGM?: SortOrder
    Ratio?: SortOrder
    Diamond_Type?: SortOrder
    Member_Comments?: SortOrder
    Time_to_Location?: SortOrder
    LsMatchedPairSeparable?: SortOrder
    Pair_Stock?: SortOrder
    Allow_Raplink_Feed?: SortOrder
    Parcel_Stones?: SortOrder
    Center_Inclusion?: SortOrder
    Black_Inclusion?: SortOrder
    Lab_Location?: SortOrder
    Brand?: SortOrder
    Sarine_Name?: SortOrder
    Internal_Clarity_Desc_Code?: SortOrder
    Clarity_Description?: SortOrder
    Modified_Rate?: SortOrder
    wire_discount_price?: SortOrder
    ImageLink?: SortOrder
    VideoLink?: SortOrder
    Video_HTML?: SortOrder
    CertificateLink?: SortOrder
    Rap_Price?: SortOrder
    Memo_Price?: SortOrder
    Memo_Discount_PER?: SortOrder
    Buy_Price?: SortOrder
    Buy_Price_Discount_PER?: SortOrder
    COD_Buy_Price?: SortOrder
    COD_Buy_Price_Discount_PER?: SortOrder
    Certificate?: SortOrder
  }

  export type DiamondAvgOrderByAggregateInput = {
    id?: SortOrder
    Weight?: SortOrder
    DEPTH_PER?: SortOrder
    TABLE_PER?: SortOrder
    Girdle_Min?: SortOrder
    Girdle_Max?: SortOrder
    Girdle_Per?: SortOrder
    Crown_Height?: SortOrder
    Crown_Angle?: SortOrder
    Pavilion_Depth?: SortOrder
    Pavilion_Angle?: SortOrder
    Ratio?: SortOrder
    Modified_Rate?: SortOrder
    wire_discount_price?: SortOrder
    Rap_Price?: SortOrder
    Memo_Price?: SortOrder
    Memo_Discount_PER?: SortOrder
    Buy_Price?: SortOrder
    Buy_Price_Discount_PER?: SortOrder
    COD_Buy_Price?: SortOrder
    COD_Buy_Price_Discount_PER?: SortOrder
  }

  export type DiamondMaxOrderByAggregateInput = {
    id?: SortOrder
    Stock_No?: SortOrder
    Availability?: SortOrder
    Shape?: SortOrder
    Weight?: SortOrder
    Color?: SortOrder
    Clarity?: SortOrder
    Cut_Grade?: SortOrder
    Polish?: SortOrder
    Symmetry?: SortOrder
    Fluorescence_Intensity?: SortOrder
    Fluorescence_Color?: SortOrder
    Measurements?: SortOrder
    Lab?: SortOrder
    Treatment?: SortOrder
    FancyColor?: SortOrder
    Fancy_Color_Intensity?: SortOrder
    FancyColorOvertone?: SortOrder
    DEPTH_PER?: SortOrder
    TABLE_PER?: SortOrder
    Girdle_Min?: SortOrder
    Girdle_Max?: SortOrder
    Girdle_Per?: SortOrder
    Girdle_Condition?: SortOrder
    Culet_Size?: SortOrder
    Culet_Condition?: SortOrder
    Crown_Height?: SortOrder
    Crown_Angle?: SortOrder
    Pavilion_Depth?: SortOrder
    Pavilion_Angle?: SortOrder
    Cert_Comments?: SortOrder
    Country?: SortOrder
    State?: SortOrder
    City?: SortOrder
    Country_Of_Origin?: SortOrder
    Key_To_Symbols?: SortOrder
    Shade?: SortOrder
    Star_Length?: SortOrder
    Report_Issue_Date?: SortOrder
    Report_Type?: SortOrder
    Milky?: SortOrder
    Eye_Clean?: SortOrder
    Gemprint_ID?: SortOrder
    BGM?: SortOrder
    Ratio?: SortOrder
    Diamond_Type?: SortOrder
    Member_Comments?: SortOrder
    Time_to_Location?: SortOrder
    LsMatchedPairSeparable?: SortOrder
    Pair_Stock?: SortOrder
    Allow_Raplink_Feed?: SortOrder
    Parcel_Stones?: SortOrder
    Center_Inclusion?: SortOrder
    Black_Inclusion?: SortOrder
    Lab_Location?: SortOrder
    Brand?: SortOrder
    Sarine_Name?: SortOrder
    Internal_Clarity_Desc_Code?: SortOrder
    Clarity_Description?: SortOrder
    Modified_Rate?: SortOrder
    wire_discount_price?: SortOrder
    ImageLink?: SortOrder
    VideoLink?: SortOrder
    Video_HTML?: SortOrder
    CertificateLink?: SortOrder
    Rap_Price?: SortOrder
    Memo_Price?: SortOrder
    Memo_Discount_PER?: SortOrder
    Buy_Price?: SortOrder
    Buy_Price_Discount_PER?: SortOrder
    COD_Buy_Price?: SortOrder
    COD_Buy_Price_Discount_PER?: SortOrder
    Certificate?: SortOrder
  }

  export type DiamondMinOrderByAggregateInput = {
    id?: SortOrder
    Stock_No?: SortOrder
    Availability?: SortOrder
    Shape?: SortOrder
    Weight?: SortOrder
    Color?: SortOrder
    Clarity?: SortOrder
    Cut_Grade?: SortOrder
    Polish?: SortOrder
    Symmetry?: SortOrder
    Fluorescence_Intensity?: SortOrder
    Fluorescence_Color?: SortOrder
    Measurements?: SortOrder
    Lab?: SortOrder
    Treatment?: SortOrder
    FancyColor?: SortOrder
    Fancy_Color_Intensity?: SortOrder
    FancyColorOvertone?: SortOrder
    DEPTH_PER?: SortOrder
    TABLE_PER?: SortOrder
    Girdle_Min?: SortOrder
    Girdle_Max?: SortOrder
    Girdle_Per?: SortOrder
    Girdle_Condition?: SortOrder
    Culet_Size?: SortOrder
    Culet_Condition?: SortOrder
    Crown_Height?: SortOrder
    Crown_Angle?: SortOrder
    Pavilion_Depth?: SortOrder
    Pavilion_Angle?: SortOrder
    Cert_Comments?: SortOrder
    Country?: SortOrder
    State?: SortOrder
    City?: SortOrder
    Country_Of_Origin?: SortOrder
    Key_To_Symbols?: SortOrder
    Shade?: SortOrder
    Star_Length?: SortOrder
    Report_Issue_Date?: SortOrder
    Report_Type?: SortOrder
    Milky?: SortOrder
    Eye_Clean?: SortOrder
    Gemprint_ID?: SortOrder
    BGM?: SortOrder
    Ratio?: SortOrder
    Diamond_Type?: SortOrder
    Member_Comments?: SortOrder
    Time_to_Location?: SortOrder
    LsMatchedPairSeparable?: SortOrder
    Pair_Stock?: SortOrder
    Allow_Raplink_Feed?: SortOrder
    Parcel_Stones?: SortOrder
    Center_Inclusion?: SortOrder
    Black_Inclusion?: SortOrder
    Lab_Location?: SortOrder
    Brand?: SortOrder
    Sarine_Name?: SortOrder
    Internal_Clarity_Desc_Code?: SortOrder
    Clarity_Description?: SortOrder
    Modified_Rate?: SortOrder
    wire_discount_price?: SortOrder
    ImageLink?: SortOrder
    VideoLink?: SortOrder
    Video_HTML?: SortOrder
    CertificateLink?: SortOrder
    Rap_Price?: SortOrder
    Memo_Price?: SortOrder
    Memo_Discount_PER?: SortOrder
    Buy_Price?: SortOrder
    Buy_Price_Discount_PER?: SortOrder
    COD_Buy_Price?: SortOrder
    COD_Buy_Price_Discount_PER?: SortOrder
    Certificate?: SortOrder
  }

  export type DiamondSumOrderByAggregateInput = {
    id?: SortOrder
    Weight?: SortOrder
    DEPTH_PER?: SortOrder
    TABLE_PER?: SortOrder
    Girdle_Min?: SortOrder
    Girdle_Max?: SortOrder
    Girdle_Per?: SortOrder
    Crown_Height?: SortOrder
    Crown_Angle?: SortOrder
    Pavilion_Depth?: SortOrder
    Pavilion_Angle?: SortOrder
    Ratio?: SortOrder
    Modified_Rate?: SortOrder
    wire_discount_price?: SortOrder
    Rap_Price?: SortOrder
    Memo_Price?: SortOrder
    Memo_Discount_PER?: SortOrder
    Buy_Price?: SortOrder
    Buy_Price_Discount_PER?: SortOrder
    COD_Buy_Price?: SortOrder
    COD_Buy_Price_Discount_PER?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableBigIntFieldUpdateOperationsInput = {
    set?: bigint | number | null
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type RatingCreateNestedOneWithoutProductInput = {
    create?: XOR<RatingCreateWithoutProductInput, RatingUncheckedCreateWithoutProductInput>
    connectOrCreate?: RatingCreateOrConnectWithoutProductInput
    connect?: RatingWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type RatingUpdateOneWithoutProductNestedInput = {
    create?: XOR<RatingCreateWithoutProductInput, RatingUncheckedCreateWithoutProductInput>
    connectOrCreate?: RatingCreateOrConnectWithoutProductInput
    upsert?: RatingUpsertWithoutProductInput
    disconnect?: RatingWhereInput | boolean
    delete?: RatingWhereInput | boolean
    connect?: RatingWhereUniqueInput
    update?: XOR<XOR<RatingUpdateToOneWithWhereWithoutProductInput, RatingUpdateWithoutProductInput>, RatingUncheckedUpdateWithoutProductInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProductCreateNestedOneWithoutRatingInput = {
    create?: XOR<ProductCreateWithoutRatingInput, ProductUncheckedCreateWithoutRatingInput>
    connectOrCreate?: ProductCreateOrConnectWithoutRatingInput
    connect?: ProductWhereUniqueInput
  }

  export type ProductUncheckedCreateNestedOneWithoutRatingInput = {
    create?: XOR<ProductCreateWithoutRatingInput, ProductUncheckedCreateWithoutRatingInput>
    connectOrCreate?: ProductCreateOrConnectWithoutRatingInput
    connect?: ProductWhereUniqueInput
  }

  export type ProductUpdateOneWithoutRatingNestedInput = {
    create?: XOR<ProductCreateWithoutRatingInput, ProductUncheckedCreateWithoutRatingInput>
    connectOrCreate?: ProductCreateOrConnectWithoutRatingInput
    upsert?: ProductUpsertWithoutRatingInput
    disconnect?: ProductWhereInput | boolean
    delete?: ProductWhereInput | boolean
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutRatingInput, ProductUpdateWithoutRatingInput>, ProductUncheckedUpdateWithoutRatingInput>
  }

  export type ProductUncheckedUpdateOneWithoutRatingNestedInput = {
    create?: XOR<ProductCreateWithoutRatingInput, ProductUncheckedCreateWithoutRatingInput>
    connectOrCreate?: ProductCreateOrConnectWithoutRatingInput
    upsert?: ProductUpsertWithoutRatingInput
    disconnect?: ProductWhereInput | boolean
    delete?: ProductWhereInput | boolean
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutRatingInput, ProductUpdateWithoutRatingInput>, ProductUncheckedUpdateWithoutRatingInput>
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedBigIntNullableFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | null
    notIn?: bigint[] | number[] | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableFilter<$PrismaModel> | bigint | number | null
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedBigIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | null
    notIn?: bigint[] | number[] | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableWithAggregatesFilter<$PrismaModel> | bigint | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedBigIntNullableFilter<$PrismaModel>
    _min?: NestedBigIntNullableFilter<$PrismaModel>
    _max?: NestedBigIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type RatingCreateWithoutProductInput = {
    rate: number
    count: number
    productId?: number | null
  }

  export type RatingUncheckedCreateWithoutProductInput = {
    id?: number
    rate: number
    count: number
    productId?: number | null
  }

  export type RatingCreateOrConnectWithoutProductInput = {
    where: RatingWhereUniqueInput
    create: XOR<RatingCreateWithoutProductInput, RatingUncheckedCreateWithoutProductInput>
  }

  export type RatingUpsertWithoutProductInput = {
    update: XOR<RatingUpdateWithoutProductInput, RatingUncheckedUpdateWithoutProductInput>
    create: XOR<RatingCreateWithoutProductInput, RatingUncheckedCreateWithoutProductInput>
    where?: RatingWhereInput
  }

  export type RatingUpdateToOneWithWhereWithoutProductInput = {
    where?: RatingWhereInput
    data: XOR<RatingUpdateWithoutProductInput, RatingUncheckedUpdateWithoutProductInput>
  }

  export type RatingUpdateWithoutProductInput = {
    rate?: FloatFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    productId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type RatingUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    rate?: FloatFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    productId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ProductCreateWithoutRatingInput = {
    title: string
    price: number
    description: string
    category: string
    image: string
  }

  export type ProductUncheckedCreateWithoutRatingInput = {
    id?: number
    title: string
    price: number
    description: string
    category: string
    image: string
  }

  export type ProductCreateOrConnectWithoutRatingInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutRatingInput, ProductUncheckedCreateWithoutRatingInput>
  }

  export type ProductUpsertWithoutRatingInput = {
    update: XOR<ProductUpdateWithoutRatingInput, ProductUncheckedUpdateWithoutRatingInput>
    create: XOR<ProductCreateWithoutRatingInput, ProductUncheckedCreateWithoutRatingInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutRatingInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutRatingInput, ProductUncheckedUpdateWithoutRatingInput>
  }

  export type ProductUpdateWithoutRatingInput = {
    title?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type ProductUncheckedUpdateWithoutRatingInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use SessionDefaultArgs instead
     */
    export type SessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SessionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProductDefaultArgs instead
     */
    export type ProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProductDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RatingDefaultArgs instead
     */
    export type RatingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RatingDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DiamondDefaultArgs instead
     */
    export type DiamondArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DiamondDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}